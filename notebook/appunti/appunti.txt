1 install

nteract ~ jupyter ? yup https://www.reddit.com/r/Python/comments/6w1zh3/nteract_vs_jupyter_notebook/
procedimento add ijulia uguale a per jupyter nb

2 Variables and Printing

#= =# === /*  */

3 string

errore notebook
Notebook validation failed: Additional properties are not allowed ('outputs' was unexpected):
{
 "outputs": [],
 "cell_type": "markdown",
 "source": "# Strings\n\nTopics:\n1. How to get a string\n2. String interpolation\n3. String concatenation",
 "metadata": {}
}

dichiara string con """ """ per usare "" all interno della string
@assert var == value -> se var != value , manda errore

4 data struct
Notebook validation failed: Additional properties are not allowed ('outputs' was unexpected):
{
 "outputs": [],
 "cell_type": "markdown",
 "source": "# Data structures\n\nOnce we start working with many pieces of data at once, it will be convenient for us to store data in structures like arrays or dictionaries (rather than just relying on variables).<br>\n\nTypes of data structures covered:\n1. Tuples\n2. Dictionaries\n3. Arrays\n\n<br>\nAs an overview, tuples and arrays are both ordered sequences of elements (so we can index into them). Dictionaries and arrays are both mutable.\nWe'll explain this more below!",
 "metadata": {}
}

tuple immutabili, ordinate

array 
ordinati, mutabili, tipi anche misti sse misti quando array viene dichiarato/init
pop! di default fa pop su ultimo elem
si posson fare array di data struc non base (tipo arr di arr)
array n dimensionali son array di n array (gli array non devon esser equal lunghezza)
length(array) ritorna lunghezza length(["asd"]) ret 1
indicizzati da 1, array[0] ritorna errore

dict: coppie tipo key->value, coppie modificabili, dict modificabile, coppie non ordinate (riferimento tramite key), ha fun pop,


5 loops

end per chiudere i blocchi?

for doppio, zucchero sintattico
for i in 1:10, j in 1:10
esegue 10*10 volte, una per ogni comb di i  e j

array comprehension?

6 condizionali

come js/c/etc ma senza parentesi e con un end alla fine (dopo eventuale blocco else)

ha op condizionale ? come java: (condizione) ? (se vero) : (se falso)

c'è && per concat condizioni, condizioni valutate ordinatamente (se metti un op dopo && op viene lanciata solo se il condizionale prima di && torna positivo)

7 funzioni 

dichiarate con kword function, o anche senza (tipo funzione)
funzioni landa come java

funzione != metodo

julia manda errori su ambiguità overload

convenzione: funzioni terminanti in ! modificano dati di input

broadcasting
 f(object) -> funzione viene lanciata con object come input
 f.(object) -> funzione viene lanciata con ogni elemento di object come input diverso
 
8 packages
 
using Pkg NB: case sensitive
Pkg.add("Plots")
using Plots
 segue schermata rosa bloccante essecutore julia del notebook aperto
 finisce con
 ┌ Info: Precompiling Plots [91a5bcdd-55d7-5caf-9e0b-520d859cae80]
└ @ Base loading.jl:1278
 8(?) plotting
 Notebook validation failed: Additional properties are not allowed ('outputs' was unexpected):
{
 "outputs": [],
 "cell_type": "markdown",
 "source": "# Plotting\n\n## Basics\nThere are a few different ways to plot in Julia (including calling PyPlot). <br>\n\nHere we'll show you how to use `Plots.jl`.  If it's not installed yet, you need to use the package manager to install it, and Julia will precompile it for you the first time you use it:",
 "metadata": {}
}

 plot(x,y)
 scatter!(x,y)
 crea plot linea, ci aggiunge plot scatter
 
  plot(x,y)
  scatter(x,y)
  crea plot linea, poi crea plot scatter
  
  
  
 12? multiple dispatch  (vs dynamic dispatch)
 
 methods( operatore ) ritorna lista metodi dell operatore
 
 @which {formula con operatore}  ritorna quale metodo viene usato nella formula data
 
 13 BENCHMARKING
 
 ##installazione mingw per avere gcc in windows: https://www.cs.umb.edu/cs444/gccWindows.html
 
 1. salva fun da comparare in var diverse
 2. controlla che diano output uguali con input uguali con approx
 3. crea var bench = @benchmark $funzione(input)
 4. aggiungi bench a dizionario dizionario["descrizione bench"] = minimum(bench.times) / 1e6 <-ie6 per avere tempo in ms
 5. ripeti per ogni fun
 6. ordina dict
 
 14 algebra lineare base
 
 NB: 
 b = a -> b è pointer ad a, se cambio a cambio output di b
 c = copy(a) ->  no
 
  .trasposizione
  A' -> coniugata trasposta
  A.' -> trasposta OPERATORE DISCONTINUATO
  transpose(A) -< da transposta
  
  .moltiplicaz matrici
  
  A'A moltiplica matrici
  

  .sistema lineare  
 x = ones(3)
A = rand(1:4,3,3)
b = A*x 
A\b -< ritorna Ax=b
	julia si comporta diversamente a seconda del rapporto colonne/righe della colonna dei parametri A
	
	
	.op con vettori
	
	v::vettore
	v'v -> scalare
	v*transpose(v) -> matrice 
	
	
15 fattorizazione


 
ALTRO
	dataframe.js
	https://www.youtube.com/watch?v=eLVPC08NAJc
	
	regole stage/covid19 unive
	https://www.unive.it/pag/7130/
