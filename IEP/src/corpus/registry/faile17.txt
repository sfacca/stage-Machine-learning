MethodError(Catlab.CSetDataStructures.set_subpart!, (ACSet(
  Code_symbol = 1:55,
  Function = 1:134,
  Variable = 1:286,
  Symbol = 1:366,
  Language = 1:1,
  Math_Expression = 1:0,
  Concept = 1:0,
  Unit = 1:0,
  Entity = 1:0,
  Ontology = 1:0,
  Code_block = 1:69,
  Module = 1:14,
  File = 1:16,
  Any = 1:832,
  AComponentOfB = 1:8728,
  XCalledByY = 1:330,
  CUsesD = 1:36,
  EIncludesF = 1:4,
  value = Any,
  ImplementsFunc : Code_block → Function = [1, 3, 4, 5, 7, 11, 14, 16, 6, 7, 7, 7, 5, 27, 27, 29, 31, 18, 5, 4, 5, 34, 36, 5, 38, 5, 45, 45, 45, 5, 39, 40, 63, 63, 7, 69, 73, 29, 74, 64, 64, 7, 70, 70, 70, 79, 80, 92, 92, 7, 94, 95, 96, 96, 102, 99, 108, 109, 109, 117, 117, 118, 120, 121, 121, 122, 122, 126, 131],
  Co_occurs : Any → Any = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  IsMeasuredIn : Any → Unit = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  ImplementsExpr : Function → Math_Expression = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  ImplementsConc : Function → Concept = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  VERB : Any → Any = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  IsSubClassOf : Concept → Concept = Int64[],
  ImplementedInModule : Code_block → Module = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  ImplementedInFile : Code_block → File = [1, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 0, 12, 12, 0, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 16],
  SubmoduleOf : Module → Module = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  DefinedIn : Module → File = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  UsesLanguage : Any → Language = [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  isLanguage : Any → Language = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  isMath_Expression : Any → Math_Expression = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  isConcept : Any → Concept = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  isUnit : Any → Unit = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  isCode_symbol : Any → Code_symbol = [0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 14, 0, 0, 0, 0, 0, 0, 0, 0, 15, 16, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 20, 21, 22, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 26, 27, 28, 29, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 33, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 36, 37, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 42, 43, 44, 45, 46, 47, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  isFunction : Any → Function = [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 0, 0, 0, 0, 0, 0, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 94, 0, 0, 0, 95, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108, 0, 0, 0, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 117, 0, 0, 0, 0, 0, 0, 0, 0, 118, 0, 0, 0, 0, 0, 120, 0, 0, 0, 0, 0, 121, 0, 0, 0, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  isVariable : Any → Variable = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 8, 9, 10, 11, 0, 0, 0, 0, 0, 0, 0, 0, 12, 13, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 16, 17, 18, 19, 20, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 24, 25, 26, 27, 0, 0, 0, 0, 0, 0, 0, 0, 28, 29, 30, 0, 0, 0, 0, 0, 0, 0, 31, 32, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 35, 36, 37, 38, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 41, 42, 43, 44, 45, 46, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 49, 50, 0, 0, 0, 0, 0, 0, 0, 51, 52, 0, 0, 0, 0, 53, 54, 0, 0, 0, 55, 0, 0, 0, 56, 0, 0, 0, 0, 57, 58, 59, 60, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 63, 0, 0, 0, 64, 65, 66, 0, 0, 0, 0, 0, 0, 0, 67, 68, 0, 0, 0, 0, 0, 69, 70, 71, 72, 0, 0, 0, 0, 0, 0, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 105, 0, 0, 0, 106, 107, 0, 0, 0, 0, 108, 0, 0, 0, 0, 109, 110, 111, 112, 113, 114, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 130, 131, 0, 0, 0, 0, 132, 0, 0, 0, 0, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146, 147, 0, 0, 0, 0, 0, 148, 149, 0, 0, 0, 150, 151, 0, 0, 0, 0, 152, 0, 0, 0, 0, 153, 0, 0, 0, 154, 155, 156, 157, 158, 159, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 0, 0, 0, 0, 161, 162, 163, 164, 165, 166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 185, 186, 187, 188, 189, 190, 191, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 193, 0, 0, 0, 194, 195, 196, 197, 0, 0, 0, 0, 0, 0, 0, 198, 0, 0, 0, 199, 0, 0, 0, 0, 0, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 227, 228, 229, 230, 231, 232, 233, 234, 235, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 236, 0, 0, 0, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 261, 262, 0, 0, 0, 0, 263, 264, 265, 0, 0, 0, 0, 0, 0, 266, 267, 0, 0, 0, 0, 268, 269, 0, 0, 0, 0, 0, 0, 0, 0, 270, 271, 272, 273, 274, 275, 276, 0, 0, 0, 0, 0, 0, 0, 0, 0, 277, 0, 0, 0, 278, 279, 280, 281, 282, 0, 0, 0, 0, 0, 0, 0, 0, 0, 283, 284, 285, 286, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  isSymbol : Any → Symbol = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 13, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 16, 17, 18, 19, 20, 0, 0, 0, 0, 0, 21, 22, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 0, 0, 0, 0, 0, 0, 0, 36, 37, 38, 39, 40, 0, 0, 0, 0, 0, 0, 41, 42, 43, 0, 0, 0, 0, 0, 0, 0, 44, 45, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 0, 0, 0, 0, 0, 0, 0, 0, 72, 73, 74, 75, 76, 77, 0, 0, 0, 78, 79, 0, 0, 0, 0, 80, 81, 0, 0, 82, 0, 0, 0, 83, 84, 0, 0, 0, 0, 0, 0, 0, 85, 86, 87, 88, 89, 0, 0, 0, 0, 0, 0, 0, 90, 91, 0, 0, 0, 0, 92, 93, 94, 0, 95, 0, 0, 0, 0, 96, 97, 0, 0, 0, 0, 0, 0, 0, 98, 99, 100, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 0, 0, 0, 0, 116, 117, 118, 119, 120, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 0, 0, 0, 0, 147, 148, 0, 0, 0, 149, 150, 0, 0, 0, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 0, 0, 0, 0, 0, 0, 180, 181, 182, 0, 0, 183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 0, 0, 0, 0, 200, 201, 0, 0, 0, 0, 0, 202, 203, 0, 0, 0, 204, 205, 0, 0, 0, 206, 0, 0, 0, 0, 207, 0, 0, 0, 0, 0, 0, 0, 0, 208, 209, 210, 211, 212, 213, 0, 0, 0, 0, 214, 0, 0, 0, 0, 0, 0, 0, 0, 0, 215, 216, 217, 218, 219, 220, 221, 222, 223, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 0, 0, 0, 262, 0, 0, 0, 0, 0, 0, 263, 264, 265, 266, 0, 0, 0, 0, 267, 0, 0, 0, 268, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 301, 302, 303, 304, 305, 306, 307, 308, 0, 0, 0, 0, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 0, 0, 0, 334, 335, 0, 0, 0, 0, 0, 336, 337, 338, 0, 0, 0, 0, 0, 339, 340, 0, 0, 0, 0, 341, 342, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 343, 344, 345, 346, 347, 348, 349, 350, 0, 0, 351, 0, 0, 0, 0, 0, 0, 0, 352, 353, 354, 355, 356, 357, 0, 0, 0, 0, 0, 0, 0, 358, 359, 360, 361, 362, 363, 364, 365, 366],
  isCode_block : Any → Code_block = [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 9, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 15, 0, 0, 0, 16, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 19, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 21, 0, 0, 22, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 28, 0, 0, 0, 0, 29, 30, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 34, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 40, 0, 0, 41, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 44, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 49, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0, 0, 0, 52, 0, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0, 0, 0, 0, 60, 0, 0, 0, 0, 0, 0, 61, 0, 62, 0, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 64, 65, 0, 0, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  isModule : Any → Module = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  isFile : Any → File = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  A : AComponentOfB → Any = [4, 5, 6, 7, 8, 6, 9, 10, 9, 11, 5, 6, 7, 12, 6, 13, 14, 15, 14, 15, 14, 8, 6, 9, 10, 16, 17, 18, 19, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 4, 5, 6, 7, 35, 36, 6, 9, 6, 10, 9, 11, 5, 6, 7, 6, 10, 37, 38, 39, 37, 38, 40, 21, 41, 25, 42, 24, 4, 5, 6, 7, 45, 6, 9, 6, 10, 9, 11, 46, 6, 9, 47, 6, 48, 49, 50, 49, 51, 52, 21, 53, 54, 55, 24, 25, 56, 57, 4, 5, 6, 7, 45, 6, 9, 6, 10, 9, 11, 5, 6, 7, 46, 6, 9, 47, 6, 14, 46, 6, 9, 47, 6, 10, 60, 49, 50, 61, 49, 51, 49, 62, 63, 21, 53, 54, 55, 24, 25, 64, 56, 57, 28, 65, 68, 69, 5, 6, 7, 45, 6, 9, 6, 14, 45, 6, 9, 6, 35, 36, 6, 9, 6, 14, 8, 6, 9, 10, 11, 4, 6, 9, 5, 6, 7, 6, 14, 70, 10, 71, 72, 5, 6, 7, 6, 14, 5, 46, 6, 9, 47, 6, 7, 6, 14, 36, 6, 9, 70, 10, 10, 73, 74, 75, 37, 76, 77, 78, 76, 79, 62, 80, 76, 50, 62, 75, 38, 78, 81, 82, 83, 21, 84, 54, 40, 28, 85, 86, 87, 25, 88, 23, 24, 65, 89, 90, 91, 55, 56, 41, 92, 93, 4, 5, 46, 6, 9, 47, 6, 7, 45, 6, 9, 6, 10, 9, 11, 5, 6, 7, 6, 14, 5, 6, 7, 6, 10, 10, 96, 80, 97, 61, 98, 99, 100, 97, 101, 56, 89, 21, 102, 54, 64, 24, 25, 103, 104, 28, 105, 4, 5, 46, 6, 9, 47, 6, 7, 45, 6, 9, 6, 10, 9, 11, 108, 7, 46, 6, 9, 47, 6, 14, 8, 5, 46, 6, 9, 47, 6, 7, 5, 6, 7, 46, 6, 9, 47, 6, 10, 10, 9, 10, 96, 100, 97, 61, 97, 109, 96, 110, 100, 97, 111, 101, 56, 105, 21, 102, 54, 64, 24, 25, 112, 28, 113, 114, 23, 4, 5, 46, 6, 9, 47, 6, 7, 45, 6, 9, 6, 10, 9, 11, 46, 6, 9, 47, 6, 96, 111, 97, 61, 97, 111, 101, 56, 114, 21, 102, 54, 64, 24, 25, 4, 5, 6, 7, 45, 6, 9, 6, 14, 45, 6, 9, 6, 10, 9, 11, 5, 6, 7, 6, 14, 5, 46, 6, 9, 47, 6, 7, 6, 10, 10, 61, 111, 119, 62, 120, 61, 111, 96, 121, 62, 64, 21, 114, 54, 122, 28, 65, 123, 24, 25, 101, 56, 124, 68, 69, 5, 6, 7, 45, 6, 9, 6, 14, 45, 6, 9, 6, 35, 8, 6, 9, 10, 11, 4, 6, 9, 5, 6, 7, 127, 10, 128, 129, 5, 47, 9, 6, 9, 5, 6, 7, 6, 10, 11, 130, 5, 131, 6, 132, 47, 9, 6, 133, 9, 6, 9, 5, 6, 7, 15, 10, 4, 6, 9, 5, 131, 6, 132, 47, 9, 6, 133, 7, 127, 10, 71, 72, 5, 6, 7, 6, 14, 6, 35, 8, 6, 9, 14, 36, 6, 9, 6, 10, 73, 71, 72, 5, 6, 7, 6, 14, 6, 35, 8, 6, 9, 10, 73, 74, 75, 134, 135, 136, 79, 76, 135, 78, 137, 79, 79, 78, 136, 138, 139, 79, 78, 74, 75, 76, 79, 78, 139, 74, 75, 76, 79, 82, 83, 21, 84, 54, 140, 28, 141, 142, 88, 23, 24, 85, 25, 143, 144, 145, 87, 146, 147, 148, 149, 150, 151, 152, 153, 154, 91, 93, 68, 69, 5, 6, 7, 45, 6, 9, 6, 14, 45, 6, 9, 6, 35, 8, 6, 9, 10, 11, 128, 129, 5, 47, 9, 6, 9, 5, 6, 7, 6, 10, 11, 130, 5, 131, 6, 132, 47, 9, 6, 133, 9, 6, 9, 5, 6, 7, 15, 10, 4, 6, 9, 5, 6, 7, 6, 14, 127, 10, 4, 6, 9, 5, 6, 7, 131, 6, 132, 47, 9, 6, 133, 14, 127, 10, 71, 72, 5, 6, 7, 156, 5, 6, 7, 6, 14, 6, 35, 8, 6, 9, 14, 36, 6, 9, 6, 10, 157, 4, 108, 7, 6, 14, 6, 10, 9, 5, 6, 7, 6, 14, 6, 10, 10, 158, 11, 71, 72, 5, 6, 7, 156, 5, 6, 7, 6, 14, 6, 35, 8, 6, 9, 10, 157, 4, 6, 9, 5, 6, 7, 6, 14, 127, 10, 10, 73, 73, 74, 75, 134, 135, 159, 79, 78, 137, 79, 79, 78, 159, 138, 160, 161, 135, 162, 161, 79, 78, 163, 74, 75, 164, 79, 78, 165, 164, 165, 166, 160, 162, 163, 74, 75, 164, 79, 164, 161, 135, 82, 83, 21, 84, 54, 140, 28, 141, 167, 88, 23, 24, 144, 145, 87, 146, 147, 148, 149, 150, 151, 152, 153, 168, 25, 169, 143, 170, 91, 171, 172, 173, 174, 175, 176, 93, 68, 69, 5, 6, 7, 45, 6, 9, 178, 6, 179, 180, 9, 6, 181, 14, 45, 6, 9, 6, 35, 8, 6, 9, 10, 11, 128, 129, 5, 47, 9, 6, 9, 5, 6, 7, 6, 10, 11, 130, 5, 131, 6, 132, 47, 9, 6, 133, 9, 6, 9, 5, 6, 7, 15, 10, 4, 6, 9, 5, 6, 7, 6, 14, 127, 10, 4, 6, 9, 5, 6, 7, 131, 6, 132, 47, 9, 6, 133, 14, 127, 10, 4, 6, 9, 5, 6, 7, 6, 14, 6, 14, 6, 10, 71, 72, 5, 6, 7, 156, 5, 6, 7, 6, 14, 6, 35, 8, 6, 9, 14, 36, 6, 9, 6, 10, 157, 4, 108, 7, 6, 14, 6, 14, 6, 10, 9, 6, 10, 158, 11, 4, 6, 9, 5, 6, 7, 6, 14, 5, 6, 7, 6, 14, 127, 10, 10, 71, 72, 5, 6, 7, 156, 5, 6, 7, 6, 14, 6, 35, 8, 6, 9, 10, 157, 4, 108, 7, 6, 14, 6, 10, 9, 6, 10, 73, 73, 74, 182, 183, 134, 135, 159, 79, 78, 137, 79, 79, 78, 159, 138, 160, 161, 135, 162, 161, 79, 78, 184, 166, 182, 160, 162, 163, 74, 75, 164, 79, 78, 165, 75, 164, 165, 184, 184, 166, 182, 161, 135, 163, 74, 75, 164, 79, 75, 164, 184, 82, 83, 21, 185, 54, 186, 187, 188, 140, 189, 28, 141, 167, 88, 23, 24, 144, 145, 87, 146, 147, 148, 149, 150, 151, 152, 153, 168, 25, 169, 143, 170, 190, 175, 91, 171, 84, 172, 173, 174, 176, 93, 68, 69, 5, 6, 7, 6, 14, 6, 35, 8, 6, 9, 10, 11, 4, 6, 9, 5, 6, 7, 6, 14, 6, 35, 8, 6, 9, 10, 4, 6, 9, 5, 6, 7, 6, 10, 71, 72, 5, 6, 7, 6, 14, 6, 10, 73, 60, 75, 135, 79, 48, 74, 75, 135, 79, 192, 60, 48, 193, 135, 192, 82, 63, 21, 84, 28, 141, 88, 23, 24, 52, 25, 83, 194, 91, 195, 93, 4, 5, 6, 7, 45, 6, 9, 6, 14, 6, 10, 9, 11, 5, 6, 7, 6, 14, 6, 10, 193, 135, 136, 198, 199, 135, 198, 195, 21, 141, 54, 142, 28, 200, 24, 25, 201, 4, 5, 6, 7, 45, 6, 9, 6, 14, 6, 10, 9, 11, 5, 6, 7, 6, 14, 6, 10, 193, 135, 159, 203, 199, 135, 203, 195, 21, 141, 54, 167, 28, 204, 24, 25, 201, 68, 69, 5, 6, 7, 6, 14, 6, 35, 8, 6, 9, 10, 11, 4, 6, 9, 5, 6, 7, 6, 14, 6, 35, 8, 6, 9, 10, 71, 72, 5, 6, 9, 6, 73, 207, 75, 135, 79, 192, 60, 75, 135, 79, 135, 192, 82, 208, 21, 84, 28, 141, 88, 23, 24, 194, 25, 63, 91, 209, 93, 68, 69, 5, 6, 7, 6, 14, 6, 14, 6, 35, 36, 6, 9, 47, 9, 6, 14, 8, 6, 9, 10, 11, 4, 6, 9, 5, 6, 7, 6, 14, 6, 35, 36, 6, 9, 6, 14, 8, 6, 9, 10, 71, 72, 5, 6, 7, 6, 14, 6, 14, 36, 6, 9, 6, 10, 73, 212, 75, 135, 213, 38, 214, 79, 215, 207, 75, 135, 213, 213, 79, 216, 215, 213, 38, 38, 82, 217, 21, 84, 28, 141, 218, 41, 25, 145, 219, 88, 23, 24, 220, 208, 91, 221, 93, 4, 5, 224, 7, 45, 6, 9, 6, 10, 7, 8, 6, 9, 35, 8, 6, 9, 10, 9, 11, 5, 6, 7, 6, 14, 8, 6, 9, 35, 8, 6, 9, 10, 75, 134, 17, 79, 212, 75, 17, 79, 21, 84, 54, 140, 24, 22, 23, 88, 25, 217, 28, 4, 5, 6, 7, 45, 6, 9, 178, 6, 179, 180, 9, 6, 181, 10, 9, 11, 5, 6, 7, 6, 14, 6, 10, 60, 227, 183, 228, 98, 60, 227, 63, 21, 229, 54, 186, 187, 188, 230, 189, 24, 25, 103, 28, 4, 5, 6, 7, 45, 6, 9, 6, 10, 9, 11, 108, 46, 6, 9, 47, 6, 14, 46, 6, 9, 47, 6, 48, 49, 232, 49, 233, 49, 234, 52, 21, 53, 54, 235, 24, 25, 56, 236, 28, 237, 4, 5, 6, 7, 45, 6, 9, 6, 10, 9, 11, 5, 46, 6, 9, 47, 6, 9, 46, 6, 9, 47, 6, 60, 49, 232, 49, 234, 49, 233, 63, 21, 53, 54, 235, 24, 25, 56, 237, 239, 236, 4, 5, 46, 6, 9, 47, 6, 7, 45, 6, 9, 6, 14, 36, 6, 9, 70, 10, 9, 11, 5, 6, 7, 5, 6, 7, 6, 10, 14, 6, 10, 96, 242, 49, 232, 243, 242, 48, 49, 243, 101, 56, 244, 21, 53, 54, 235, 28, 245, 25, 90, 24, 52, 4, 5, 6, 7, 6, 35, 36, 6, 9, 6, 14, 36, 6, 9, 70, 10, 9, 11, 5, 6, 7, 6, 14, 6, 14, 6, 10, 249, 75, 250, 251, 252, 249, 75, 250, 252, 253, 21, 84, 254, 25, 255, 28, 256, 90, 24, 68, 69, 5, 6, 7, 45, 6, 9, 6, 14, 45, 6, 9, 6, 35, 6, 14, 6, 14, 36, 6, 9, 5, 6, 7, 6, 10, 14, 8, 6, 9, 10, 11, 4, 6, 9, 5, 6, 7, 6, 14, 6, 14, 6, 14, 46, 6, 9, 47, 6, 10, 4, 6, 9, 5, 6, 7, 127, 10, 4, 6, 9, 5, 6, 7, 6, 10, 12, 46, 6, 9, 47, 6, 13, 258, 157, 4, 6, 9, 5, 6, 7, 6, 14, 70, 10, 11, 4, 6, 9, 5, 6, 7, 6, 14, 6, 14, 6, 35, 36, 6, 9, 46, 6, 9, 47, 6, 10, 4, 6, 9, 131, 6, 132, 5, 6, 9, 6, 14, 9, 133, 4, 6, 9, 131, 6, 132, 6, 14, 9, 133, 4, 6, 9, 131, 6, 132, 6, 133, 4, 6, 9, 5, 6, 7, 46, 6, 9, 47, 6, 14, 6, 35, 8, 6, 9, 14, 36, 6, 9, 6, 14, 36, 6, 9, 6, 10, 4, 131, 6, 132, 6, 14, 9, 133, 9, 5, 6, 7, 6, 10, 73, 71, 72, 5, 6, 7, 6, 14, 6, 10, 73, 60, 75, 249, 135, 136, 213, 259, 260, 261, 135, 79, 262, 263, 213, 260, 259, 75, 252, 76, 135, 192, 264, 76, 265, 266, 267, 100, 192, 268, 269, 213, 267, 262, 250, 75, 250, 270, 76, 267, 267, 78, 76, 268, 271, 213, 268, 49, 74, 75, 272, 270, 79, 78, 78, 213, 271, 192, 267, 60, 49, 199, 135, 192, 82, 63, 21, 84, 54, 253, 28, 141, 142, 218, 273, 274, 25, 275, 24, 88, 23, 276, 277, 56, 256, 85, 143, 194, 278, 279, 280, 174, 281, 146, 105, 90, 282, 283, 254, 284, 148, 145, 149, 87, 285, 53, 83, 286, 93, 91, 201, 4, 5, 6, 7, 45, 6, 9, 6, 10, 9, 11, 5, 46, 6, 9, 47, 6, 9, 5, 224, 7, 5, 46, 6, 9, 47, 6, 9, 46, 6, 9, 47, 6, 10, 9, 70, 261, 135, 136, 135, 289, 135, 290, 135, 289, 275, 21, 141, 54, 142, 24, 25, 56, 291, 292, 293, 294, 295, 296, 68, 69, 5, 6, 7, 45, 6, 9, 6, 14, 45, 6, 9, 6, 35, 6, 14, 36, 6, 9, 46, 6, 9, 47, 6, 14, 8, 6, 9, 10, 11, 298, 299, 6, 4, 6, 9, 5, 6, 7, 6, 14, 127, 10, 4, 6, 9, 5, 6, 7, 46, 6, 9, 47, 6, 10, 4, 6, 9, 5, 6, 7, 46, 6, 9, 47, 6, 14, 6, 10, 12, 6, 13, 4, 6, 9, 15, 11, 300, 4, 6, 9, 70, 4, 6, 9, 301, 5, 6, 7, 6, 14, 46, 6, 9, 47, 6, 14, 6, 10, 302, 303, 108, 6, 14, 6, 14, 6, 11, 4, 6, 9, 5, 6, 7, 6, 14, 6, 14, 6, 14, 6, 10, 12, 6, 13, 304, 15, 9, 6, 15, 9, 6, 15, 4, 6, 9, 5, 6, 7, 6, 10, 12, 6, 13, 12, 46, 6, 9, 47, 6, 13, 258, 157, 4, 6, 9, 5, 6, 7, 6, 14, 70, 10, 11, 4, 6, 9, 5, 6, 7, 6, 14, 6, 14, 6, 35, 36, 6, 9, 46, 6, 9, 47, 6, 10, 4, 6, 9, 131, 6, 132, 5, 6, 9, 6, 14, 9, 133, 4, 6, 9, 131, 6, 132, 6, 14, 9, 133, 4, 6, 9, 131, 6, 132, 6, 133, 4, 6, 9, 5, 6, 7, 46, 6, 9, 47, 6, 14, 6, 35, 8, 6, 9, 14, 36, 6, 9, 6, 14, 36, 6, 9, 6, 10, 4, 131, 6, 132, 6, 14, 9, 133, 9, 5, 6, 7, 6, 10, 73, 305, 6, 9, 70, 12, 6, 13, 5, 6, 9, 6, 4, 6, 9, 6, 71, 72, 6, 73, 73, 71, 72, 5, 6, 7, 6, 14, 6, 10, 73, 60, 75, 249, 135, 159, 213, 259, 135, 306, 79, 307, 160, 161, 135, 308, 99, 135, 309, 310, 311, 75, 252, 308, 312, 313, 314, 307, 98, 160, 135, 315, 310, 164, 260, 252, 262, 263, 213, 260, 259, 252, 316, 262, 260, 192, 264, 164, 317, 265, 266, 318, 100, 192, 268, 269, 213, 318, 262, 250, 75, 250, 270, 164, 318, 318, 78, 164, 268, 271, 213, 268, 49, 74, 75, 272, 270, 79, 78, 78, 213, 271, 192, 318, 60, 49, 314, 319, 314, 308, 320, 262, 192, 199, 135, 307, 82, 63, 21, 84, 54, 253, 28, 141, 167, 218, 273, 25, 56, 321, 88, 23, 24, 322, 323, 168, 169, 143, 324, 104, 325, 326, 327, 256, 328, 329, 330, 331, 332, 333, 103, 334, 335, 172, 274, 276, 277, 336, 337, 338, 339, 340, 194, 278, 341, 279, 280, 174, 342, 146, 105, 90, 282, 283, 254, 284, 148, 145, 149, 87, 285, 53, 83, 286, 93, 343, 344, 295, 345, 91, 201, 4, 5, 6, 7, 6, 14, 6, 10, 9, 11, 5, 6, 7, 6, 14, 6, 10, 311, 252, 348, 349, 252, 348, 327, 21, 256, 28, 350, 24, 25, 351, 4, 5, 6, 7, 45, 6, 9, 6, 14, 6, 10, 9, 11, 5, 6, 7, 8, 6, 9, 14, 36, 6, 9, 6, 10, 311, 252, 353, 348, 354, 252, 99, 348, 327, 21, 256, 54, 355, 28, 350, 24, 25, 356, 23, 104, 4, 5, 6, 7, 45, 6, 9, 6, 14, 6, 10, 9, 11, 6, 311, 252, 183, 348, 252, 327, 21, 256, 54, 186, 28, 350, 24, 25, 68, 69, 5, 6, 7, 45, 6, 9, 178, 6, 179, 180, 9, 6, 181, 14, 45, 6, 9, 6, 35, 6, 14, 36, 6, 9, 46, 6, 9, 47, 6, 14, 8, 6, 9, 10, 11, 4, 6, 9, 5, 6, 7, 6, 14, 127, 10, 4, 6, 9, 5, 6, 7, 46, 6, 9, 47, 6, 10, 4, 6, 9, 5, 6, 7, 46, 6, 9, 47, 6, 14, 6, 10, 298, 299, 6, 12, 6, 13, 4, 6, 9, 15, 11, 300, 4, 6, 9, 70, 4, 6, 9, 301, 5, 6, 7, 6, 14, 46, 6, 9, 47, 6, 14, 46, 6, 9, 47, 6, 14, 6, 10, 302, 303, 108, 6, 14, 6, 14, 6, 14, 6, 11, 4, 6, 9, 5, 6, 7, 6, 14, 6, 14, 6, 14, 6, 10, 4, 6, 9, 5, 6, 7, 6, 10, 12, 6, 13, 12, 46, 6, 9, 47, 6, 13, 258, 157, 4, 6, 9, 5, 6, 7, 6, 14, 70, 10, 11, 12, 6, 13, 304, 15, 9, 6, 15, 9, 6, 15, 4, 6, 9, 5, 6, 7, 6, 14, 6, 14, 6, 35, 36, 6, 9, 46, 6, 9, 47, 6, 10, 4, 6, 9, 131, 6, 132, 5, 6, 9, 6, 14, 9, 133, 4, 6, 9, 131, 6, 132, 6, 14, 9, 133, 4, 6, 9, 131, 6, 132, 6, 133, 4, 6, 9, 5, 6, 7, 6, 14, 6, 35, 8, 6, 9, 14, 36, 6, 9, 6, 14, 36, 6, 9, 6, 10, 4, 131, 6, 132, 6, 14, 9, 133, 9, 5, 6, 7, 6, 10, 73, 305, 6, 9, 70, 12, 6, 13, 5, 6, 9, 6, 71, 72, 6, 73, 73, 71, 72, 5, 6, 7, 6, 14, 6, 10, 73, 60, 75, 249, 183, 135, 159, 213, 259, 135, 306, 79, 160, 161, 135, 308, 99, 135, 309, 310, 311, 75, 252, 308, 307, 312, 313, 314, 307, 98, 160, 135, 315, 75, 272, 310, 164, 260, 359, 252, 262, 263, 213, 260, 259, 252, 192, 264, 164, 317, 265, 266, 318, 100, 192, 316, 262, 260, 268, 269, 213, 318, 262, 250, 75, 250, 270, 164, 318, 318, 78, 164, 268, 271, 213, 268, 49, 74, 359, 270, 79, 78, 78, 213, 271, 192, 318, 60, 49, 314, 319, 314, 308, 192, 199, 135, 307, 82, 63, 21, 84, 54, 253, 187, 188, 186, 189, 28, 141, 167, 218, 273, 25, 56, 321, 88, 23, 24, 168, 169, 143, 324, 104, 325, 326, 327, 256, 322, 323, 328, 329, 330, 331, 332, 333, 103, 334, 286, 335, 172, 274, 360, 276, 277, 194, 278, 341, 279, 280, 174, 342, 146, 105, 90, 336, 337, 338, 339, 340, 282, 283, 254, 284, 148, 145, 149, 87, 285, 53, 83, 93, 343, 344, 295, 91, 201, 68, 69, 5, 6, 7, 6, 14, 6, 14, 6, 14, 6, 10, 11, 4, 6, 9, 5, 70, 9, 5, 6, 7, 5, 6, 9, 6, 14, 5, 70, 9, 6, 10, 4, 6, 9, 5, 5, 6, 7, 5, 5, 6, 7, 6, 10, 9, 5, 6, 7, 6, 10, 10, 9, 70, 4, 6, 9, 5, 6, 9, 363, 128, 129, 5, 6, 9, 6, 11, 12, 6, 13, 304, 15, 9, 6, 15, 9, 6, 15, 4, 6, 9, 6, 73, 71, 72, 6, 73, 263, 213, 260, 259, 252, 262, 364, 252, 259, 260, 365, 366, 367, 213, 368, 213, 369, 365, 262, 369, 370, 262, 369, 262, 369, 262, 82, 277, 21, 218, 28, 274, 273, 256, 24, 276, 25, 296, 239, 371, 372, 373, 374, 294, 375, 295, 376, 377, 144, 378, 379, 380, 338, 381, 340, 93, 91, 68, 69, 5, 6, 7, 6, 14, 6, 14, 6, 35, 36, 6, 9, 6, 10, 11, 4, 108, 6, 14, 6, 9, 108, 5, 6, 7, 6, 10, 14, 5, 6, 7, 6, 10, 4, 108, 6, 14, 6, 9, 108, 6, 14, 6, 258, 157, 4, 6, 9, 5, 6, 9, 5, 6, 9, 70, 11, 128, 129, 5, 5, 6, 7, 5, 131, 6, 132, 6, 133, 9, 131, 6, 132, 6, 133, 10, 9, 6, 11, 4, 6, 9, 6, 384, 158, 11, 305, 6, 9, 70, 73, 73, 258, 157, 4, 6, 9, 5, 6, 9, 6, 11, 128, 129, 5, 5, 6, 7, 5, 131, 6, 132, 6, 133, 9, 131, 6, 132, 6, 133, 10, 9, 6, 11, 4, 6, 9, 6, 384, 158, 11, 305, 6, 9, 70, 73, 73, 128, 129, 5, 6, 7, 6, 10, 11, 4, 6, 9, 5, 6, 9, 70, 4, 6, 9, 5, 5, 6, 7, 5, 6, 9, 6, 14, 6, 10, 9, 5, 6, 9, 70, 4, 6, 9, 5, 6, 9, 5, 5, 6, 7, 5, 6, 9, 6, 14, 6, 10, 9, 70, 158, 11, 4, 6, 9, 5, 6, 9, 5, 6, 9, 70, 4, 6, 9, 5, 6, 9, 6, 73, 71, 72, 5, 6, 7, 6, 14, 6, 10, 73, 269, 213, 385, 320, 250, 251, 386, 387, 388, 213, 389, 213, 390, 62, 386, 385, 267, 386, 385, 366, 213, 385, 213, 267, 320, 390, 267, 390, 369, 385, 387, 366, 213, 369, 213, 385, 320, 62, 369, 62, 391, 250, 392, 250, 393, 394, 390, 392, 386, 390, 395, 62, 396, 62, 392, 387, 393, 386, 390, 395, 62, 387, 397, 393, 395, 82, 283, 21, 218, 28, 398, 345, 254, 25, 255, 24, 399, 400, 401, 402, 403, 65, 174, 281, 146, 145, 294, 90, 144, 373, 148, 149, 404, 405, 176, 343, 93, 376, 406, 407, 408, 409, 296, 410, 411, 412, 413, 292, 91, 414, 4, 5, 6, 7, 36, 6, 9, 5, 6, 7, 10, 35, 36, 6, 9, 70, 10, 9, 11, 5, 6, 7, 6, 14, 6, 10, 418, 75, 419, 420, 418, 75, 420, 421, 21, 84, 25, 422, 24, 423, 333, 28, 4, 5, 6, 7, 45, 6, 9, 6, 35, 36, 6, 9, 70, 14, 8, 6, 9, 10, 9, 11, 5, 6, 7, 5, 6, 7, 6, 35, 8, 6, 9, 10, 14, 36, 6, 9, 6, 10, 418, 425, 120, 420, 79, 418, 419, 425, 79, 420, 420, 421, 21, 426, 54, 123, 423, 25, 333, 28, 88, 23, 24, 422, 68, 69, 5, 6, 7, 45, 6, 9, 178, 6, 179, 180, 9, 6, 181, 14, 45, 6, 9, 6, 35, 6, 14, 36, 45, 6, 9, 6, 9, 6, 14, 8, 6, 9, 10, 11, 4, 6, 9, 5, 6, 7, 10, 4, 6, 9, 5, 6, 7, 6, 10, 4, 6, 9, 5, 6, 7, 46, 46, 6, 9, 47, 6, 9, 47, 6, 14, 6, 10, 4, 6, 9, 46, 6, 9, 47, 6, 4, 6, 9, 12, 6, 13, 4, 46, 6, 9, 47, 6, 9, 70, 4, 6, 9, 5, 6, 7, 6, 14, 6, 10, 4, 6, 9, 5, 6, 7, 6, 14, 5, 6, 9, 5, 6, 7, 6, 10, 10, 4, 6, 9, 5, 6, 7, 6, 14, 6, 10, 12, 6, 13, 4, 6, 9, 15, 258, 157, 4, 6, 9, 5, 70, 9, 6, 11, 428, 6, 9, 5, 6, 9, 5, 6, 7, 6, 14, 6, 14, 46, 6, 9, 47, 6, 10, 4, 6, 9, 5, 6, 7, 10, 4, 6, 9, 12, 6, 13, 4, 46, 6, 9, 47, 6, 9, 6, 4, 6, 9, 5, 6, 7, 6, 14, 6, 35, 36, 6, 9, 6, 10, 4, 6, 9, 5, 6, 7, 6, 14, 5, 6, 9, 5, 6, 7, 6, 10, 10, 4, 6, 9, 5, 6, 7, 6, 14, 6, 10, 73, 128, 129, 5, 6, 9, 6, 11, 4, 6, 9, 46, 6, 9, 47, 6, 4, 6, 9, 5, 5, 6, 7, 10, 9, 429, 6, 9, 71, 72, 5, 6, 7, 6, 14, 6, 10, 73, 71, 72, 6, 73, 74, 75, 418, 430, 76, 136, 213, 78, 136, 76, 79, 270, 76, 431, 432, 76, 433, 434, 75, 272, 425, 270, 435, 75, 272, 435, 436, 435, 425, 48, 74, 435, 270, 215, 199, 76, 270, 60, 48, 437, 216, 215, 213, 438, 313, 62, 433, 431, 78, 439, 437, 213, 75, 420, 440, 431, 435, 436, 435, 425, 62, 48, 74, 435, 270, 78, 440, 215, 199, 76, 270, 60, 48, 437, 216, 215, 213, 78, 76, 441, 48, 233, 442, 76, 441, 232, 441, 442, 48, 82, 83, 21, 84, 54, 421, 187, 188, 443, 189, 28, 85, 142, 218, 87, 25, 88, 23, 24, 284, 444, 445, 446, 447, 56, 286, 426, 448, 449, 90, 52, 220, 201, 209, 63, 450, 221, 451, 329, 174, 65, 146, 145, 452, 453, 423, 454, 93, 144, 455, 456, 236, 457, 239, 458, 91, 235, 68, 69, 5, 6, 7, 6, 14, 6, 14, 6, 35, 8, 6, 9, 10, 11, 4, 6, 9, 5, 6, 7, 6, 10, 4, 6, 9, 46, 6, 9, 108, 7, 6, 14, 6, 10, 4, 6, 9, 5, 6, 7, 6, 14, 6, 14, 8, 5, 6, 7, 6, 10, 9, 10, 12, 46, 6, 9, 47, 6, 13, 258, 157, 4, 6, 9, 5, 6, 7, 6, 14, 70, 10, 11, 428, 131, 6, 132, 6, 14, 9, 14, 9, 133, 9, 5, 6, 7, 6, 14, 5, 9, 131, 6, 132, 6, 133, 35, 8, 6, 9, 10, 73, 71, 72, 6, 73, 439, 51, 213, 420, 79, 348, 99, 213, 461, 394, 51, 420, 135, 264, 51, 348, 80, 51, 265, 266, 385, 100, 135, 135, 385, 462, 461, 213, 385, 79, 135, 82, 453, 21, 57, 28, 218, 423, 88, 23, 24, 350, 25, 104, 463, 411, 56, 141, 278, 89, 279, 280, 174, 398, 146, 105, 90, 148, 145, 149, 452, 464, 294, 93, 91, 4, 5, 6, 7, 35, 36, 6, 9, 6, 10, 9, 11, 5, 6, 7, 6, 10, 468, 425, 469, 468, 425, 470, 21, 426, 25, 471, 24, 68, 69, 5, 6, 7, 45, 6, 9, 6, 14, 6, 35, 8, 6, 9, 10, 11, 4, 6, 9, 5, 6, 7, 6, 10, 128, 129, 5, 47, 9, 6, 9, 5, 6, 7, 6, 10, 11, 4, 6, 9, 5, 6, 7, 131, 6, 132, 47, 9, 6, 133, 10, 4, 6, 9, 5, 6, 7, 6, 14, 6, 35, 8, 6, 9, 14, 36, 6, 9, 6, 10, 158, 11, 4, 6, 9, 5, 6, 7, 6, 14, 6, 35, 8, 6, 9, 10, 73, 71, 72, 5, 6, 9, 6, 73, 207, 75, 468, 135, 79, 270, 473, 135, 78, 137, 79, 474, 473, 79, 78, 192, 60, 75, 270, 79, 78, 474, 192, 60, 75, 270, 79, 270, 192, 82, 208, 21, 84, 54, 470, 28, 141, 88, 23, 24, 284, 25, 475, 144, 145, 87, 146, 147, 476, 148, 149, 194, 63, 176, 93, 91, 209, 68, 69, 5, 6, 7, 6, 10, 11, 128, 129, 5, 6, 7, 5, 9, 7, 70, 10, 14, 6, 10, 11, 71, 72, 5, 6, 9, 5, 6, 7, 6, 10, 73, 71, 72, 6, 73, 473, 76, 479, 76, 76, 368, 76, 76, 82, 475, 21, 85, 24, 144, 480, 404, 333, 28, 91, 209, 375, 93, 4, 5, 6, 7, 6, 35, 8, 6, 9, 10, 9, 11, 5, 6, 7, 6, 14, 6, 10, 419, 425, 484, 419, 425, 484, 422, 21, 426, 485, 23, 24, 25, 28, 4, 5, 6, 7, 35, 36, 6, 9, 6, 14, 8, 6, 9, 10, 9, 11, 5, 6, 7, 6, 14, 6, 10, 419, 425, 469, 484, 419, 425, 484, 422, 21, 426, 25, 471, 28, 485, 23, 24, 68, 69, 5, 6, 7, 45, 6, 9, 6, 14, 45, 6, 9, 6, 35, 36, 6, 9, 6, 14, 8, 6, 9, 10, 11, 4, 6, 9, 5, 6, 7, 46, 6, 9, 47, 6, 14, 6, 35, 8, 46, 6, 9, 47, 6, 9, 10, 4, 6, 9, 5, 6, 7, 5, 6, 7, 6, 10, 10, 4, 6, 9, 131, 46, 6, 9, 47, 6, 132, 5, 70, 9, 6, 14, 9, 133, 4, 6, 9, 5, 6, 9, 429, 6, 9, 71, 72, 5, 6, 7, 6, 14, 6, 10, 73, 74, 75, 419, 76, 77, 78, 76, 79, 369, 434, 75, 425, 78, 75, 488, 489, 490, 491, 78, 492, 489, 493, 369, 442, 76, 492, 232, 492, 442, 82, 83, 21, 84, 54, 422, 28, 85, 86, 87, 25, 88, 23, 24, 376, 447, 56, 426, 494, 495, 496, 497, 498, 499, 148, 90, 145, 149, 457, 239, 458, 91, 235, 93, 4, 5, 6, 7, 45, 6, 9, 6, 14, 6, 35, 8, 6, 9, 10, 9, 11, 5, 6, 7, 6, 14, 5, 6, 7, 6, 14, 70, 10, 10, 434, 62, 120, 76, 79, 396, 62, 80, 76, 447, 21, 65, 54, 123, 28, 85, 88, 23, 24, 25, 413, 89, 90, 4, 5, 6, 7, 45, 9, 6, 14, 6, 35, 8, 6, 9, 10, 9, 11, 5, 6, 7, 6, 14, 70, 10, 434, 503, 76, 79, 80, 76, 447, 21, 54, 504, 28, 85, 88, 23, 24, 25, 89, 90, 68, 69, 5, 6, 7, 45, 6, 9, 6, 14, 6, 35, 8, 6, 9, 10, 11, 128, 129, 5, 6, 9, 47, 9, 6, 11, 5, 6, 7, 6, 35, 8, 6, 9, 10, 506, 507, 5, 6, 9, 47, 9, 6, 11, 5, 6, 7, 6, 35, 8, 6, 9, 10, 158, 11, 5, 6, 7, 15, 10, 73, 73, 434, 508, 509, 76, 79, 508, 510, 511, 76, 79, 508, 512, 513, 76, 79, 138, 82, 447, 21, 514, 54, 515, 28, 85, 88, 23, 24, 144, 516, 145, 517, 518, 519, 520, 521, 176, 152, 522, 93, 68, 69, 5, 6, 7, 6, 35, 36, 6, 9, 525, 14, 36, 6, 9, 363, 10, 11, 128, 129, 6, 11, 4, 6, 9, 5, 6, 7, 6, 35, 36, 6, 9, 70, 10, 4, 6, 9, 5, 6, 7, 6, 35, 36, 6, 9, 70, 14, 36, 6, 9, 6, 10, 4, 6, 9, 12, 6, 13, 5, 224, 7, 5, 6, 9, 6, 10, 9, 6, 158, 11, 4, 6, 9, 5, 6, 9, 5, 6, 7, 6, 14, 36, 6, 9, 70, 10, 73, 4, 6, 9, 46, 5, 6, 7, 6, 10, 9, 47, 6, 4, 6, 9, 5, 6, 7, 6, 10, 4, 6, 9, 4, 6, 9, 70, 12, 6, 13, 4, 6, 9, 15, 258, 157, 4, 6, 9, 5, 6, 7, 6, 14, 70, 10, 11, 4, 6, 9, 12, 6, 13, 131, 6, 132, 5, 70, 9, 6, 14, 9, 133, 428, 6, 9, 5, 6, 9, 224, 7, 5, 6, 9, 5, 429, 6, 9, 9, 6, 10, 4, 6, 9, 128, 6, 9, 5, 6, 7, 5, 6, 7, 6, 14, 36, 6, 9, 70, 10, 10, 9, 5, 6, 7, 6, 10, 128, 129, 5, 6, 9, 5, 5, 6, 7, 6, 14, 70, 10, 9, 70, 11, 4, 6, 9, 5, 6, 9, 6, 12, 6, 13, 4, 6, 9, 6, 4, 6, 9, 6, 128, 129, 5, 6, 9, 6, 11, 12, 6, 13, 304, 15, 9, 6, 15, 71, 72, 6, 73, 73, 4, 108, 6, 14, 6, 9, 108, 6, 14, 6, 73, 71, 72, 5, 6, 7, 6, 14, 70, 10, 73, 511, 76, 526, 527, 526, 528, 529, 76, 81, 530, 531, 76, 81, 529, 528, 532, 533, 76, 528, 530, 532, 76, 529, 76, 81, 492, 490, 532, 493, 534, 264, 76, 535, 536, 438, 313, 537, 100, 76, 538, 539, 492, 537, 534, 532, 540, 538, 538, 510, 526, 541, 39, 534, 81, 541, 534, 537, 388, 76, 542, 536, 510, 316, 543, 542, 510, 510, 542, 527, 370, 537, 537, 536, 535, 535, 510, 389, 76, 82, 518, 21, 85, 544, 25, 545, 28, 546, 547, 24, 144, 548, 549, 92, 90, 550, 551, 552, 553, 294, 295, 176, 209, 93, 498, 496, 56, 499, 554, 278, 555, 556, 333, 451, 329, 557, 174, 558, 146, 105, 559, 560, 148, 145, 149, 452, 239, 561, 458, 517, 562, 563, 42, 406, 401, 292, 296, 564, 336, 565, 404, 379, 566, 338, 567, 91, 402, 68, 69, 5, 6, 7, 6, 35, 36, 6, 9, 363, 10, 11, 12, 6, 13, 304, 15, 9, 7, 5, 6, 9, 70, 10, 15, 4, 6, 9, 5, 6, 9, 5, 6, 7, 6, 14, 36, 6, 9, 70, 10, 4, 6, 9, 46, 5, 6, 7, 6, 10, 9, 47, 6, 4, 6, 9, 5, 6, 7, 6, 10, 4, 6, 9, 12, 6, 13, 5, 5, 6, 9, 70, 9, 224, 7, 5, 6, 9, 70, 10, 4, 6, 9, 5, 6, 7, 5, 6, 9, 5, 6, 7, 6, 10, 10, 4, 6, 9, 5, 6, 7, 5, 6, 7, 6, 14, 6, 10, 10, 12, 6, 13, 304, 15, 9, 7, 5, 6, 9, 70, 10, 15, 9, 6, 15, 71, 72, 6, 73, 513, 76, 512, 316, 512, 532, 76, 529, 76, 81, 570, 571, 532, 192, 62, 99, 570, 572, 533, 570, 62, 573, 574, 572, 575, 572, 369, 576, 577, 573, 512, 370, 512, 369, 369, 82, 521, 21, 85, 520, 25, 377, 24, 336, 578, 338, 239, 579, 580, 552, 209, 549, 28, 92, 90, 581, 582, 56, 194, 65, 104, 583, 553, 584, 296, 295, 294, 585, 586, 587, 588, 376, 589, 590, 379, 340, 591, 567, 91, 93, 4, 5, 6, 7, 6, 35, 8, 6, 9, 10, 9, 11, 5, 6, 7, 6, 14, 6, 10, 594, 425, 484, 594, 425, 484, 595, 21, 426, 485, 23, 24, 25, 28, 4, 5, 6, 7, 35, 36, 6, 9, 6, 14, 8, 6, 9, 10, 9, 11, 5, 6, 7, 6, 14, 6, 10, 594, 425, 469, 484, 594, 425, 484, 595, 21, 426, 25, 471, 28, 485, 23, 24, 68, 69, 5, 6, 7, 45, 6, 9, 6, 14, 45, 6, 9, 6, 35, 36, 6, 9, 6, 14, 8, 6, 9, 10, 11, 4, 6, 9, 5, 6, 7, 46, 6, 9, 47, 6, 14, 6, 35, 8, 46, 6, 9, 47, 6, 9, 10, 4, 108, 6, 14, 6, 14, 6, 9, 5, 6, 7, 5, 6, 7, 6, 10, 14, 6, 10, 4, 6, 9, 429, 6, 9, 4, 6, 9, 5, 6, 9, 429, 6, 9, 71, 72, 5, 6, 7, 6, 14, 6, 10, 73, 74, 75, 594, 76, 77, 78, 76, 79, 369, 434, 75, 425, 78, 75, 488, 598, 599, 600, 601, 491, 78, 369, 492, 600, 442, 76, 492, 232, 492, 442, 82, 83, 21, 84, 54, 595, 28, 85, 86, 87, 25, 88, 23, 24, 376, 447, 56, 426, 494, 602, 603, 604, 605, 497, 498, 458, 457, 239, 91, 235, 93, 4, 5, 6, 7, 6, 10, 9, 11, 5, 6, 7, 6, 14, 6, 10, 609, 75, 609, 75, 75, 610, 21, 84, 24, 25, 28, 4, 5, 6, 7, 6, 10, 9, 11, 5, 6, 7, 6, 14, 6, 10, 613, 75, 613, 75, 75, 614, 21, 84, 24, 25, 28, 68, 69, 5, 6, 7, 6, 14, 6, 14, 6, 14, 6, 14, 8, 6, 9, 35, 6, 14, 36, 6, 9, 70, 14, 36, 6, 9, 70, 14, 36, 6, 9, 70, 14, 36, 6, 9, 70, 14, 36, 6, 9, 5, 46, 6, 9, 47, 6, 7, 6, 14, 6, 10, 14, 36, 6, 9, 70, 14, 36, 6, 9, 70, 14, 36, 6, 9, 70, 14, 36, 6, 9, 127, 14, 36, 6, 9, 127, 14, 8, 6, 9, 10, 11, 12, 6, 13, 15, 4, 6, 9, 5, 6, 7, 6, 14, 6, 35, 8, 6, 9, 10, 4, 108, 6, 14, 6, 9, 5, 6, 7, 6, 14, 6, 14, 6, 14, 6, 14, 8, 6, 9, 35, 36, 6, 9, 6, 14, 36, 6, 9, 6, 14, 36, 6, 9, 6, 14, 36, 6, 9, 6, 14, 36, 6, 9, 6, 14, 36, 6, 9, 6, 14, 36, 6, 9, 6, 14, 8, 6, 9, 10, 4, 6, 9, 5, 5, 6, 7, 6, 14, 36, 6, 9, 70, 10, 9, 6, 128, 129, 6, 11, 71, 72, 5, 6, 7, 6, 14, 46, 6, 9, 47, 6, 14, 6, 35, 36, 6, 9, 6, 14, 36, 6, 9, 6, 14, 36, 6, 9, 6, 14, 36, 6, 9, 6, 14, 36, 6, 9, 6, 14, 36, 6, 9, 6, 14, 36, 6, 9, 6, 10, 73, 4, 6, 9, 12, 6, 13, 5, 46, 6, 9, 47, 6, 9, 224, 7, 5, 6, 9, 6, 10, 4, 6, 9, 46, 6, 9, 108, 7, 6, 14, 6, 10, 4, 6, 9, 46, 6, 9, 108, 7, 46, 6, 9, 47, 6, 14, 6, 14, 6, 10, 4, 6, 9, 46, 6, 9, 108, 7, 6, 14, 6, 10, 71, 72, 108, 7, 4, 6, 9, 46, 6, 9, 47, 6, 14, 4, 6, 9, 6, 14, 4, 6, 9, 6, 14, 4, 6, 9, 6, 14, 4, 6, 9, 46, 6, 9, 47, 6, 10, 73, 619, 75, 135, 213, 620, 17, 259, 621, 622, 623, 624, 625, 626, 627, 135, 259, 628, 629, 369, 630, 631, 79, 370, 632, 75, 135, 213, 79, 633, 634, 635, 75, 135, 213, 620, 17, 259, 259, 624, 624, 628, 628, 623, 623, 622, 622, 629, 629, 632, 632, 79, 636, 529, 633, 81, 637, 631, 638, 632, 634, 639, 636, 259, 259, 625, 625, 621, 621, 624, 624, 623, 623, 630, 630, 369, 369, 640, 533, 634, 510, 636, 625, 641, 642, 621, 640, 643, 644, 634, 639, 259, 621, 645, 642, 643, 640, 639, 634, 639, 635, 636, 641, 641, 645, 645, 510, 634, 510, 82, 646, 21, 84, 28, 141, 218, 647, 22, 23, 273, 648, 25, 649, 650, 90, 651, 333, 652, 653, 654, 56, 655, 24, 656, 657, 658, 579, 376, 296, 659, 143, 660, 88, 379, 661, 662, 663, 664, 665, 666, 549, 92, 667, 668, 144, 91, 669, 670, 93, 671, 553, 517, 295, 239, 672, 673, 674, 675, 676, 68, 69, 5, 6, 7, 6, 14, 6, 14, 6, 14, 6, 14, 8, 6, 9, 35, 6, 14, 36, 6, 9, 70, 14, 36, 6, 9, 70, 14, 36, 6, 9, 70, 14, 36, 6, 9, 70, 14, 36, 6, 9, 5, 46, 6, 9, 47, 6, 7, 6, 14, 6, 10, 14, 36, 6, 9, 70, 14, 36, 6, 9, 70, 14, 36, 6, 9, 70, 14, 36, 6, 9, 127, 14, 36, 6, 9, 127, 14, 8, 6, 9, 10, 11, 12, 6, 13, 15, 4, 6, 9, 5, 6, 7, 6, 14, 6, 35, 8, 6, 9, 10, 4, 108, 6, 14, 6, 9, 5, 6, 7, 6, 14, 6, 14, 6, 14, 6, 14, 8, 6, 9, 35, 36, 6, 9, 6, 14, 36, 6, 9, 6, 14, 36, 6, 9, 6, 14, 36, 6, 9, 6, 14, 36, 6, 9, 6, 14, 36, 6, 9, 6, 14, 36, 6, 9, 6, 14, 8, 6, 9, 10, 4, 6, 9, 5, 5, 6, 7, 6, 14, 36, 6, 9, 70, 10, 9, 6, 128, 129, 6, 11, 71, 72, 5, 6, 7, 6, 14, 46, 6, 9, 47, 6, 14, 6, 35, 36, 6, 9, 6, 14, 36, 6, 9, 6, 14, 36, 6, 9, 6, 14, 36, 6, 9, 6, 14, 36, 6, 9, 6, 14, 36, 6, 9, 6, 14, 36, 6, 9, 6, 10, 73, 4, 6, 9, 12, 6, 13, 5, 46, 6, 9, 47, 6, 9, 224, 7, 5, 6, 9, 6, 10, 4, 6, 9, 46, 6, 9, 108, 7, 6, 14, 6, 10, 4, 6, 9, 46, 6, 9, 108, 7, 46, 6, 9, 47, 6, 14, 6, 14, 6, 10, 4, 6, 9, 46, 6, 9, 108, 7, 6, 14, 6, 10, 71, 72, 108, 7, 4, 6, 9, 46, 6, 9, 47, 6, 14, 4, 6, 9, 6, 14, 4, 6, 9, 6, 14, 4, 6, 9, 6, 14, 4, 6, 9, 46, 6, 9, 47, 6, 10, 73, 619, 75, 135, 213, 620, 17, 259, 621, 622, 623, 624, 625, 626, 627, 135, 259, 628, 629, 369, 630, 631, 79, 370, 632, 75, 135, 213, 79, 633, 634, 635, 75, 135, 213, 620, 17, 259, 259, 624, 624, 628, 628, 623, 623, 622, 622, 629, 629, 632, 632, 79, 636, 529, 633, 81, 637, 631, 638, 632, 634, 639, 636, 259, 259, 625, 625, 621, 621, 624, 624, 623, 623, 630, 630, 369, 369, 640, 533, 634, 510, 636, 625, 641, 642, 621, 640, 643, 644, 634, 639, 259, 621, 645, 642, 643, 640, 639, 634, 639, 635, 636, 641, 641, 645, 645, 510, 634, 510, 82, 646, 21, 84, 28, 141, 218, 647, 22, 23, 273, 648, 25, 649, 650, 90, 651, 333, 652, 653, 654, 56, 655, 24, 656, 657, 658, 579, 376, 296, 659, 143, 660, 88, 379, 661, 662, 663, 664, 665, 666, 549, 92, 667, 668, 144, 91, 669, 670, 93, 671, 553, 517, 295, 239, 672, 673, 674, 675, 676, 68, 69, 5, 6, 7, 6, 14, 6, 14, 6, 10, 11, 4, 6, 9, 5, 5, 70, 9, 6, 9, 6, 9, 6, 4, 6, 9, 5, 6, 7, 5, 70, 9, 5, 70, 9, 224, 7, 5, 6, 9, 70, 10, 10, 71, 72, 5, 5, 6, 7, 5, 6, 7, 6, 10, 14, 5, 6, 7, 5, 6, 7, 10, 14, 6, 10, 10, 9, 6, 73, 644, 681, 259, 621, 682, 683, 681, 259, 684, 685, 682, 686, 687, 682, 688, 689, 621, 684, 82, 675, 21, 690, 28, 273, 648, 24, 691, 25, 296, 239, 692, 409, 693, 694, 90, 292, 295, 294, 91, 695, 696, 697, 698, 93, 4, 5, 6, 7, 6, 14, 6, 10, 9, 11, 5, 6, 7, 6, 14, 6, 14, 6, 10, 702, 76, 259, 702, 629, 76, 259, 703, 21, 85, 28, 273, 24, 25, 658, 68, 69, 5, 6, 7, 45, 6, 9, 6, 14, 6, 14, 6, 10, 11, 4, 108, 6, 14, 6, 9, 6, 4, 108, 6, 14, 6, 9, 5, 6, 7, 6, 10, 4, 6, 9, 5, 6, 7, 5, 5, 224, 7, 5, 6, 9, 6, 10, 9, 70, 9, 5, 224, 7, 5, 6, 9, 6, 10, 9, 70, 10, 130, 5, 6, 9, 5, 5, 6, 9, 70, 9, 70, 9, 71, 72, 6, 4, 6, 9, 5, 6, 9, 70, 4, 6, 9, 5, 6, 7, 6, 14, 5, 5, 70, 9, 6, 9, 6, 9, 6, 10, 4, 6, 9, 5, 5, 70, 9, 6, 9, 6, 4, 6, 9, 5, 178, 6, 179, 70, 181, 7, 6, 10, 4, 6, 9, 5, 6, 9, 6, 4, 6, 9, 5, 6, 9, 6, 4, 6, 9, 5, 6, 7, 6, 14, 6, 10, 258, 157, 4, 6, 9, 5, 6, 7, 6, 10, 11, 4, 6, 9, 5, 6, 9, 6, 4, 6, 9, 5, 6, 9, 6, 4, 108, 6, 14, 6, 9, 5, 6, 9, 131, 6, 132, 6, 14, 6, 133, 4, 6, 9, 5, 6, 7, 6, 14, 6, 14, 6, 10, 4, 131, 6, 132, 6, 133, 9, 46, 5, 6, 7, 6, 14, 6, 10, 9, 47, 6, 73, 4, 6, 9, 12, 6, 13, 131, 6, 132, 5, 70, 9, 73, 133, 4, 6, 9, 5, 6, 7, 6, 10, 71, 72, 5, 224, 7, 5, 131, 6, 132, 70, 133, 9, 5, 6, 7, 6, 10, 10, 9, 224, 7, 5, 6, 9, 5, 6, 7, 5, 70, 9, 5, 70, 9, 224, 7, 5, 6, 9, 70, 10, 10, 10, 73, 629, 76, 77, 706, 259, 707, 708, 706, 709, 710, 711, 76, 712, 685, 707, 710, 708, 709, 712, 259, 713, 260, 259, 348, 714, 120, 683, 712, 259, 715, 683, 348, 215, 716, 715, 717, 707, 710, 718, 708, 709, 719, 264, 76, 348, 385, 720, 719, 721, 717, 710, 722, 718, 709, 717, 718, 215, 723, 717, 718, 724, 725, 721, 722, 260, 719, 385, 726, 724, 76, 727, 728, 539, 719, 729, 541, 728, 719, 529, 728, 729, 685, 348, 82, 658, 21, 85, 54, 86, 28, 730, 273, 24, 731, 732, 25, 733, 734, 735, 736, 694, 294, 584, 296, 292, 406, 295, 90, 151, 91, 737, 274, 350, 738, 123, 239, 692, 739, 220, 740, 187, 189, 741, 742, 743, 278, 174, 398, 146, 744, 745, 746, 747, 148, 149, 748, 749, 750, 56, 751, 93, 752, 560, 145, 753, 563, 549, 4, 5, 6, 7, 45, 6, 9, 6, 14, 45, 6, 9, 6, 14, 6, 10, 9, 11, 5, 6, 7, 6, 14, 5, 6, 7, 46, 6, 9, 47, 6, 10, 14, 6, 10, 629, 76, 77, 385, 755, 259, 629, 76, 756, 385, 540, 259, 658, 21, 85, 54, 86, 28, 398, 757, 273, 24, 25, 758, 56, 561, 68, 69, 5, 6, 7, 45, 6, 9, 6, 14, 6, 14, 6, 10, 11, 4, 108, 6, 14, 6, 9, 6, 4, 108, 6, 14, 6, 9, 5, 6, 7, 6, 10, 4, 6, 9, 5, 6, 7, 5, 5, 224, 7, 5, 6, 9, 6, 10, 9, 70, 9, 5, 224, 7, 5, 6, 9, 6, 10, 9, 70, 10, 4, 6, 9, 5, 6, 7, 6, 14, 6, 14, 6, 10, 71, 72, 5, 6, 7, 6, 14, 6, 14, 6, 10, 73, 761, 76, 77, 706, 259, 707, 708, 706, 709, 710, 711, 76, 712, 685, 707, 710, 708, 709, 762, 629, 76, 706, 259, 763, 762, 712, 259, 82, 764, 21, 85, 54, 86, 28, 730, 273, 24, 731, 732, 25, 733, 734, 735, 736, 694, 294, 584, 296, 292, 765, 658, 91, 766, 93, 4, 5, 6, 7, 45, 6, 9, 6, 14, 45, 6, 9, 6, 14, 6, 10, 9, 11, 5, 6, 7, 6, 14, 5, 6, 7, 46, 6, 9, 47, 6, 10, 14, 6, 10, 761, 76, 77, 385, 755, 259, 761, 76, 756, 385, 540, 259, 764, 21, 85, 54, 86, 28, 398, 757, 273, 24, 25, 758, 56, 561, 68, 69, 5, 6, 7, 6, 14, 6, 14, 6, 10, 11, 4, 6, 9, 5, 5, 5, 70, 9, 6, 9, 6, 9, 6, 9, 70, 130, 5, 6, 9, 70, 9, 71, 72, 6, 71, 72, 5, 6, 7, 5, 6, 7, 10, 14, 5, 6, 7, 5, 6, 7, 6, 10, 14, 5, 6, 7, 6, 10, 10, 10, 73, 763, 629, 712, 259, 770, 683, 712, 259, 770, 713, 686, 689, 688, 687, 770, 771, 629, 82, 766, 21, 658, 28, 736, 273, 24, 772, 25, 296, 239, 692, 295, 294, 406, 333, 151, 91, 737, 695, 698, 697, 696, 773, 93, 68, 69, 5, 6, 7, 6, 14, 6, 14, 6, 10, 11, 4, 6, 9, 5, 5, 5, 70, 9, 6, 9, 6, 9, 6, 9, 70, 130, 5, 6, 9, 70, 9, 71, 72, 6, 71, 72, 5, 6, 7, 5, 6, 7, 6, 10, 14, 5, 6, 7, 5, 6, 7, 10, 14, 5, 6, 7, 6, 10, 10, 10, 73, 776, 777, 712, 259, 770, 683, 712, 259, 770, 713, 686, 687, 770, 688, 689, 771, 777, 82, 778, 21, 779, 28, 736, 273, 24, 772, 25, 296, 239, 692, 295, 294, 406, 333, 151, 91, 737, 695, 696, 697, 698, 773, 93, 68, 69, 5, 6, 7, 45, 6, 9, 6, 14, 6, 14, 6, 10, 11, 4, 108, 6, 14, 6, 9, 6, 4, 108, 6, 14, 6, 9, 5, 6, 7, 6, 10, 4, 6, 9, 5, 6, 7, 5, 5, 224, 7, 5, 6, 9, 6, 10, 9, 70, 9, 5, 224, 7, 5, 6, 9, 6, 10, 9, 70, 10, 130, 5, 6, 9, 5, 5, 6, 9, 70, 9, 70, 9, 71, 72, 6, 4, 6, 9, 5, 6, 9, 70, 4, 6, 9, 5, 6, 7, 6, 14, 5, 5, 70, 9, 6, 9, 6, 9, 6, 10, 4, 6, 9, 5, 5, 70, 9, 6, 9, 6, 4, 6, 9, 5, 178, 6, 179, 70, 181, 7, 6, 10, 4, 6, 9, 5, 6, 9, 6, 4, 6, 9, 5, 6, 9, 6, 4, 6, 9, 5, 6, 7, 6, 14, 6, 10, 258, 157, 4, 6, 9, 5, 6, 7, 6, 10, 11, 4, 6, 9, 5, 6, 9, 6, 4, 6, 9, 5, 6, 9, 6, 4, 108, 6, 14, 6, 9, 5, 6, 9, 131, 6, 132, 6, 14, 6, 133, 4, 6, 9, 5, 6, 7, 6, 14, 6, 14, 6, 10, 4, 131, 6, 132, 6, 133, 9, 46, 5, 6, 7, 6, 14, 6, 10, 9, 47, 6, 73, 71, 72, 5, 6, 7, 6, 10, 73, 510, 76, 77, 706, 259, 707, 708, 706, 709, 710, 711, 76, 712, 685, 707, 710, 708, 709, 712, 259, 713, 260, 259, 348, 714, 120, 683, 712, 259, 715, 683, 348, 215, 716, 715, 717, 707, 710, 718, 708, 709, 719, 264, 76, 348, 385, 720, 719, 721, 717, 710, 722, 718, 709, 717, 718, 215, 723, 717, 718, 724, 725, 721, 722, 260, 719, 385, 726, 724, 76, 727, 541, 719, 82, 517, 21, 85, 54, 86, 28, 730, 273, 24, 731, 732, 25, 733, 734, 735, 736, 694, 294, 584, 296, 292, 406, 295, 90, 151, 91, 737, 274, 350, 738, 123, 239, 692, 739, 220, 740, 187, 189, 741, 742, 743, 278, 174, 398, 146, 744, 745, 746, 747, 148, 149, 748, 749, 750, 56, 751, 93, 563, 4, 5, 6, 7, 45, 6, 9, 6, 14, 45, 6, 9, 6, 14, 6, 10, 9, 11, 5, 6, 7, 6, 14, 5, 6, 7, 46, 6, 9, 47, 6, 10, 14, 6, 10, 510, 76, 77, 385, 755, 259, 510, 76, 756, 385, 540, 259, 517, 21, 85, 54, 86, 28, 398, 757, 273, 24, 25, 758, 56, 561, 68, 69, 5, 6, 7, 6, 14, 6, 14, 6, 10, 11, 4, 6, 9, 5, 46, 6, 9, 47, 6, 7, 5, 6, 7, 6, 14, 5, 9, 6, 10, 35, 36, 6, 9, 70, 10, 4, 6, 9, 5, 6, 7, 5, 6, 9, 6, 10, 4, 6, 9, 5, 6, 7, 6, 10, 71, 72, 5, 6, 9, 6, 73, 786, 787, 788, 213, 789, 626, 790, 462, 788, 213, 81, 791, 792, 787, 789, 62, 99, 787, 791, 62, 82, 793, 21, 794, 28, 795, 218, 24, 796, 25, 654, 56, 797, 464, 294, 92, 90, 798, 799, 800, 65, 104, 91, 295, 93, 68, 69, 5, 6, 7, 6, 14, 6, 10, 11, 4, 6, 9, 5, 6, 7, 5, 6, 7, 6, 14, 6, 10, 35, 36, 6, 9, 70, 10, 71, 72, 5, 6, 7, 6, 14, 6, 14, 6, 10, 73, 786, 788, 213, 802, 790, 462, 788, 213, 81, 786, 802, 788, 213, 82, 793, 21, 795, 28, 218, 24, 803, 25, 797, 464, 92, 90, 91, 93, 68, 69, 5, 6, 7, 6, 35, 6, 10, 11, 4, 6, 9, 5, 6, 7, 6, 14, 36, 6, 9, 6, 10, 4, 6, 9, 5, 6, 7, 6, 14, 36, 6, 9, 6, 14, 36, 6, 9, 6, 10, 4, 6, 9, 5, 6, 7, 6, 10, 4, 6, 9, 12, 6, 13, 5, 9, 5, 6, 7, 6, 10, 12, 6, 13, 4, 131, 6, 132, 6, 133, 9, 5, 131, 6, 132, 6, 133, 9, 131, 6, 132, 6, 133, 71, 72, 5, 6, 7, 6, 14, 36, 6, 9, 6, 10, 73, 790, 135, 81, 528, 529, 135, 81, 81, 806, 541, 135, 81, 81, 529, 528, 802, 807, 528, 808, 533, 809, 806, 533, 802, 808, 528, 808, 806, 808, 810, 802, 81, 81, 82, 797, 21, 141, 92, 24, 548, 25, 549, 28, 811, 563, 803, 812, 813, 553, 814, 815, 148, 149, 295, 91, 816, 93, 68, 69, 5, 6, 7, 6, 10, 11, 4, 6, 9, 5, 6, 7, 70, 14, 70, 10, 4, 131, 6, 132, 70, 14, 70, 133, 9, 363, 12, 6, 13, 5, 5, 6, 7, 6, 14, 108, 7, 70, 14, 70, 10, 14, 70, 10, 9, 6, 12, 6, 13, 5, 5, 6, 7, 6, 14, 108, 7, 70, 14, 70, 10, 14, 70, 10, 9, 6, 73, 820, 821, 51, 822, 51, 823, 821, 51, 713, 823, 821, 51, 251, 82, 824, 21, 825, 24, 57, 25, 826, 827, 28, 148, 828, 149, 829, 830, 831, 657, 516, 737, 832, 255, 93],
  B : AComponentOfB → Any
  X : XCalledByY → Function = [1, 2, 3, 4, 6, 5, 8, 9, 10, 11, 12, 13, 14, 15, 12, 16, 17, 6, 18, 19, 20, 7, 21, 22, 23, 24, 25, 20, 7, 21, 22, 23, 26, 24, 25, 20, 7, 21, 22, 23, 26, 27, 7, 5, 27, 28, 27, 28, 30, 5, 32, 29, 18, 31, 13, 5, 4, 33, 5, 34, 4, 35, 36, 37, 38, 12, 39, 19, 40, 7, 28, 5, 41, 42, 43, 44, 38, 44, 37, 45, 12, 39, 25, 40, 7, 28, 46, 13, 5, 41, 47, 45, 45, 48, 45, 44, 37, 45, 12, 39, 25, 40, 7, 28, 46, 13, 5, 41, 33, 43, 44, 49, 50, 51, 52, 53, 42, 43, 37, 54, 55, 49, 56, 57, 58, 59, 60, 61, 62, 63, 64, 63, 64, 65, 33, 30, 37, 66, 32, 67, 68, 69, 7, 70, 28, 5, 71, 43, 12, 72, 46, 41, 10, 73, 30, 21, 23, 74, 5, 30, 54, 75, 52, 64, 64, 33, 37, 66, 76, 70, 77, 70, 60, 10, 70, 10, 78, 20, 79, 80, 33, 42, 43, 30, 44, 37, 54, 55, 12, 56, 58, 81, 82, 41, 83, 77, 84, 33, 43, 30, 85, 44, 86, 87, 88, 46, 81, 89, 90, 91, 92, 92, 33, 66, 76, 70, 93, 94, 95, 33, 44, 97, 98, 81, 99, 100, 101, 33, 44, 97, 98, 81, 99, 100, 101, 33, 42, 43, 44, 103, 104, 105, 106, 107, 62, 108, 33, 42, 43, 44, 37, 55, 110, 111, 86, 112, 113, 114, 81, 115, 41, 107, 83, 116, 109, 42, 43, 86, 112, 109, 118, 107, 116, 117, 33, 43, 44, 55, 103, 104, 105, 119, 106, 33, 43, 44, 55, 103, 104, 105, 119, 106, 33, 42, 43, 44, 55, 110, 111, 86, 112, 113, 114, 115, 41, 107, 83, 121, 116, 43, 123, 44, 124, 125, 72, 46, 72, 126, 122, 127, 44, 128, 129, 81, 83, 130, 78, 132, 133, 134],
  Y : XCalledByY → Code_block = [1, 1, 2, 3, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 9, 9, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 21, 21, 22, 22, 22, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 28, 28, 29, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 38, 38, 39, 39, 39, 39, 40, 41, 42, 42, 42, 42, 42, 42, 43, 43, 43, 44, 44, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 48, 49, 50, 50, 50, 50, 50, 51, 52, 53, 53, 53, 53, 53, 53, 53, 53, 54, 54, 54, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 57, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 59, 59, 60, 60, 60, 60, 60, 60, 60, 61, 61, 62, 62, 62, 62, 62, 62, 62, 62, 62, 63, 63, 63, 63, 63, 63, 63, 63, 63, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 65, 65, 66, 66, 66, 66, 66, 66, 66, 67, 67, 67, 68, 68, 68, 68, 68, 68, 68, 69, 69, 69, 69],
  C : CUsesD → Any = [1, 1, 1, 415, 415, 606, 616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 677, 677, 677, 677, 677, 677, 699, 699, 699, 699],
  D : CUsesD → Module = [1, 2, 3, 4, 5, 4, 7, 8, 3, 9, 10, 11, 12, 9, 13, 14, 7, 8, 3, 9, 10, 11, 12, 9, 13, 14, 7, 8, 3, 9, 10, 11, 12, 9, 13, 14],
  E : EIncludesF → Any = [616, 616, 616, 616],
  F : EIncludesF → File = [12, 13, 14, 15],
  language : Language → value = Any["Julia"],
  math_expression : Math_Expression → value = Any[],
  concept : Concept → value = Any[],
  unit : Unit → value = Any[],
  code_symbol : Code_symbol → value = Any["=", "call", "IDENTIFIER", "LPAREN", "...", "OPERATOR", "RPAREN", "block", "macrocall", "NOTHING", "COMMA", "STRING", "parameters", "kw", "::", ".", "quotenode", "function", "FUNCTION", "INTEGER", "return", "RETURN", "END", "tuple", "TRUE", "if", "IF", "||", "ref", "LSQUARE", "RSQUARE", "generator", "FOR", "ELSE", "curly", "LBRACE", "<:", "RBRACE", "brackets", "for", "local", "LOCAL", "BEGIN", "do", "DO", "->", "string", "+=", "FLOAT", "BREAK", ".=", "'", "elseif", "ELSEIF", "FALSE"],
  func : Function → value = Any["examplesdir", "joinpath", "Classic", "design", "reconstruct", "TiledArray", "fit", "ClassicDesign", "alg.method", "size", "Base.size", "axes", "map", "Base.axes", "Base.tail", "Base.parent", "Base.OneTo", "", "cube", "error", "in", "isa", "keys", "StructArray", "eachannulus", "zip", "expand_geometry", "inverse", "subtract", ".-", "process", "collapse!", "*", "Base.iterate", "iterate", "Framewise", ":", "_radius", "compute_pa_thresh", "find_angles", "similar", "+", "-", "/", "_normalize_deltarot", "length", "Fill", "range", "abs", "atand", "maximum", "minimum", "≥", "<", ">", "firstindex", "isfinite", "lastindex", "max", "min", "vcat", "÷", "GreeDS", "PCA", "!==", "LinearDesign", "copy", "data", "expand_rotate", "get_ncomps", "tmpAnn", "derotate", "NMF", "normalize_nmf_input", "any", "collect", "svd", "===", "noise_decay_ncomps", "pratio_ncomps", "mean", "median", "std", "var", "./", "^", "cumsum", "last", "searchsorted", "sum", "svd!", "TPCA", "tsvd", "DoubleSDI", "SliceSDI", "contrast_curve", "Metrics.estimate_starphot", "alg", "subsample_contrast", "throughput", "|>", "correction_factor", "Normal", "TDist", "cdf", "quantile", "sqrt", "detectionmap", "snr", "CircularAperture", "RotMatrix{2}", "center", "eachindex", "floor", "photometry", "reverse", "significance", "snr_to_sig", "float", "sig_to_snr", "noise", "stim_threshold", ".>", "Metrics.stim", "count", "stim", "!", "dropdims", "iszero", "zero", "test_method", "func", "zeros", "≈"],
  variable : Variable → value = Any["[\"examplesdir\"]", "[\"args\"]", "[\"joinpath\"]", "[\"@__DIR__\"]", "[\"Classic\"]", "[\"method\"]", "[\"median\"]", "[\"design\"]", "[\"des\"]", "[\"ClassicDesign\"]", "[\"frame\"]", "[\"reconstruct\"]", "[\"TiledArray\"]", "[\"n\"]", "[\"fit\"]", "[\"alg\"]", "[\"data\"]", "[\"AbstractMatrix\"]", "[\"ref\"]", "[\"kwargs\"]", "[\"size\"]", "[\"dims\"]", "[\"Base\"]", "[\"t\"]", "[\"map\"]", "[\"length\"]", "[\"axes\"]", "[\"tilerange\"]", "[\"tail\"]", "[\"parent\"]", "[\"AbstractArray\"]", "[\"Int\"]", "[\"OneTo\"]", "[\"ADIAlgorithm\"]", "[\"cube\"]", "[\"AnnulusView\"]", "[\"keys\"]", "[\"error\"]", "[\"ref_data\"]", "[\"MultiAnnulusView\"]", "[\"anns\"]", "[\"eachannulus\"]", "[\"ref_anns\"]", "[\"StructArray\"]", "[\"ann\"]", "[\"ref_ann\"]", "[\"zip\"]", "[\"algs\"]", "[\"AbstractVector\"]", "[\"itr\"]", "[\"S\"]", "[\"expand_geometry\"]", "[\"arr\"]", "[\"inverse\"]", "[\"arrs\"]", "[\"subtract\"]", "[\"process\"]", "[\"angles\"]", "[\"deweight\"]", "[\"R\"]", "[\"collapse!\"]", "[\"designs\"]", "[\"ADIDesign\"]", "[\"LinearDesign\"]", "[\"basis\"]", "[\"coeffs\"]", "[\"iterate\"]", "[\"state\"]", "[\"Framewise\"]", "[\"limit\"]", "[\"Inf\"]", "[\"delta_rot\"]", "[\"fwhm\"]", "[\"r\"]", "[\"_radius\"]", "[\"pa_threshold\"]", "[\"compute_pa_thresh\"]", "[\"similar\"]", "[\"Threads\"]", "[\"@threads\"]", "[\"i\"]", "[\"inds\"]", "[\"find_angles\"]", "[\"target\"]", "[\"angs\"]", "[\"kernel\"]", "[\"rmin\"]", "[\"rmax\"]", "[\"width\"]", "[\"recons\"]", "[\"N_ann\"]", "[\"indices\"]", "[\"delta_rots\"]", "[\"_normalize_deltarot\"]", "[\"@withprogress\"]", "[\"name\"]", "[\"i_ann\"]", "[\"radii\"]", "[\"@debug\"]", "[\"@views\"]", "[\"j\"]", "[\"@logprogress\"]", "[\"thresh\"]", "[\"N\"]", "[\"Fill\"]", "[\"Tuple\"]", "[\"range\"]", "[\"_alg\"]", "[\"atand\"]", "[\"mid_range\"]", "[\"abs\"]", "[\"maximum\"]", "[\"minimum\"]", "[\"k\"]", "[\"@info\"]", "[\"idx\"]", "[\"fidx\"]", "[\"lidx\"]", "[\"firstindex\"]", "[\"lastindex\"]", "[\"p\"]", "[\"isfinite\"]", "[\"window\"]", "[\"first_half\"]", "[\"max\"]", "[\"last_half\"]", "[\"min\"]", "[\"vcat\"]", "[\"GreeDS\"]", "[\"PCA\"]", "[\"threshold\"]", "[\"ncomps\"]", "[\"PCALIKE\"]", "[\"tmpAnn\"]", "[\"copy\"]", "[\"max_ncomps\"]", "[\"get_ncomps\"]", "[\"f\"]", "[\"@set\"]", "[\"reduced\"]", "[\"@progress\"]", "[\"expand_rotate\"]", "[\"resid\"]", "[\"A\"]", "[\"weights\"]", "[\"_frame\"]", "[\"derotate\"]", "[\"NMF\"]", "[\"nothing\"]", "[\"normalize_nmf_input\"]", "[\"ref_\"]", "[\"any\"]", "[\"options\"]", "[\"opts\"]", "[\"decomp\"]", "[\"svd\"]", "[\"collect\"]", "[\"P\"]", "[\"Vt\"]", "[\"Nothing\"]", "[\"s\"]", "[\"Symbol\"]", "[\"noise\"]", "[\"noise_decay_ncomps\"]", "[\"pratio\"]", "[\"pratio_ncomps\"]", "[\"collapse\"]", "[\"noise_error\"]", "[\"μ\"]", "[\"mean\"]", "[\"σ2\"]", "[\"var\"]", "[\"X\"]", "[\"@.\"]", "[\"tmpr\"]", "[\"τ1\"]", "[\"τ2\"]", "[\"ncomp\"]", "[\"Pv\"]", "[\"@view\"]", "[\"I\"]", "[\"std\"]", "[\"px_noise_decay\"]", "[\"noise_decay\"]", "[\"Λ\"]", "[\"svd!\"]", "[\"exp_var\"]", "[\"ratio_cumsum\"]", "[\"cumsum\"]", "[\"sum\"]", "[\"last\"]", "[\"searchsorted\"]", "[\"TPCA\"]", "[\"U\"]", "[\"Σ\"]", "[\"V\"]", "[\"tsvd\"]", "[\"DoubleSDI\"]", "[\"SliceSDI\"]", "[\"contrast_curve\"]", "[\"psf\"]", "[\"sigma\"]", "[\"nbranch\"]", "[\"theta\"]", "[\"inner_rad\"]", "[\"starphot\"]", "[\"Metrics\"]", "[\"estimate_starphot\"]", "[\"fc_rad_sep\"]", "[\"snr\"]", "[\"smooth\"]", "[\"subsample\"]", "[\"reduced_empty\"]", "[\"through\"]", "[\"meta\"]", "[\"throughput\"]", "[\"through_mean\"]", "[\"vec\"]", "[\"subsample_contrast\"]", "[\"distance\"]", "[\"unit_contrast\"]", "[\"contrast\"]", "[\"calculate_contrast\"]", "[\"sigma_corr\"]", "[\"correction_factor\"]", "[\"contrast_corr\"]", "[\"radius\"]", "[\"n_res_els\"]", "[\"π\"]", "[\"ss_corr\"]", "[\"sqrt\"]", "[\"quantile\"]", "[\"TDist\"]", "[\"cdf\"]", "[\"Normal\"]", "[\"detectionmap\"]", "[\"position\"]", "[\"x\"]", "[\"y\"]", "[\"cy\"]", "[\"cx\"]", "[\"center\"]", "[\"separation\"]", "[\"NaN\"]", "[\"floor\"]", "[\"dθ\"]", "[\"RotMatrix\"]", "[\"rx\"]", "[\"ry\"]", "[\"fluxes\"]", "[\"eachindex\"]", "[\"ap_x\"]", "[\"ap_y\"]", "[\"SA\"]", "[\"ap\"]", "[\"CircularAperture\"]", "[\"photometry\"]", "[\"aperture_sum\"]", "[\"other_elements\"]", "[\"bkg_σ\"]", "[\"CartesianIndex\"]", "[\"reverse\"]", "[\"significance\"]", "[\"_snr\"]", "[\"snr_to_sig\"]", "[\"dof\"]", "[\"float\"]", "[\"sig_to_snr\"]", "[\"sig\"]", "[\"stim_threshold\"]", "[\"stimmap\"]", "[\"residuals\"]", "[\"d_opp\"]", "[\"stim\"]", "[\"n_ϵ\"]", "[\"count\"]", "[\"d\"]", "[\"σ\"]", "[\"zero\"]", "[\"mask\"]", "[\"iszero\"]", "[\"dropdims\"]", "[\"test_method\"]", "[\"func\"]", "[\"zeros\"]", "[\"@test\"]"],
  symbol : Symbol → value = Any["examplesdir", "(", "args", "...", ")", "=", "joinpath", "@__DIR__", ",", "..", "examples", "Classic", "method", "median", "design", "des", "::", "ClassicDesign", ".", "frame", "reconstruct", "TiledArray", "n", "function", "fit", "alg", "data", "AbstractMatrix", "ref", "kwargs", "size", "1", "return", "dims", "end", "Base", "t", "map", "length", "axes", "tilerange", "tail", "parent", "AbstractArray", "Int", "OneTo", "ADIAlgorithm", "cube", "AnnulusView", "true", "if", ":", "in", "keys", "[", "]", "isa", "||", "error", "reference data geometry does not match target data", "ref_data", "MultiAnnulusView", "anns", "eachannulus", "ref_anns", "StructArray", "ann", "ref_ann", "for", "zip", "else", "algs", "AbstractVector", "{", "<:", "}", "itr", "S", "expand_geometry", "arr", "inverse", "arrs", "subtract", ".-", "process", "angles", "deweight", "R", "collapse!", "designs", "ADIDesign", "LinearDesign", "basis", "coeffs", "*", "iterate", "state", "Framewise", "limit", "Inf", "delta_rot", "fwhm", "r", "_radius", "pa_threshold", "compute_pa_thresh", "similar", "Threads", "@threads", "i", "inds", "find_angles", "target", "angs", "kernel", "rmin", "+", "rmax", "-", "/", "2", "width", "local", "recons", "N_ann", "indices", "delta_rots", "_normalize_deltarot", "@withprogress", "name", "annulus", "begin", "i_ann", "0", "radii", "do", "@debug", "PA thresh: ", "\$", " Ann center: ", "", "@views", "j", "+=", "@logprogress", "thresh", "N", "Fill", "Tuple", "range", "_alg", "atand", "mid_range", "abs", "maximum", "minimum", "k", "0.9", "≥", "@info", "pa threshold ", " too large, will be set to ", "idx", "fidx", "lidx", "firstindex", "lastindex", "p", "<", "break", ">", "isfinite", "window", "÷", "first_half", "max", "last_half", "min", "vcat", "GreeDS", "PCA", "threshold", "ncomps", "PCALIKE", "tmpAnn", "copy", "max_ncomps", "get_ncomps", "f", "@set", "reduced", "@progress", ".=", "expand_rotate", "resid", "!==", "A", "weights", "'", "_frame", "derotate", "NMF", "nothing", "normalize_nmf_input", "ref_", "any", "options", "opts", "decomp", "svd", "collect", "P", "Vt", "Nothing", "s", "Symbol", "===", "noise", "noise_decay_ncomps", "elseif", "pratio", "pratio_ncomps", "Invalid `ncomps`. Did you mean :noise or :pratio?", "collapse", "false", "noise_error", "1e-3", "μ", "mean", "σ2", "var", "X", "@.", "tmpr", "τ1", "τ2", "Optimizing ncomps using residual noise", "ncomp", "Pv", "@view", "I", "?", "std", "px_noise_decay", "noise_decay", "noise threshold reached with ", " components", "Choosing ncomps required to explain ", "100", "% of data's temporal variance", "Λ", "svd!", "exp_var", "^", "ratio_cumsum", "cumsum", "./", "sum", "last", "searchsorted", "% of variance explained with ", "TPCA", "U", "Σ", "V", "tsvd", "DoubleSDI", "SliceSDI", "contrast_curve", "psf", "sigma", "5", "nbranch", "theta", "inner_rad", "starphot", "Metrics", "estimate_starphot", "fc_rad_sep", "3", "snr", "smooth", "subsample", "Calculating Throughput", "reduced_empty", "through", "meta", "throughput", "through_mean", "|>", "vec", "subsample_contrast", "distance", "unit_contrast", "contrast", "calculate_contrast", "sigma_corr", "correction_factor", "contrast_corr", "radius", "n_res_els", "π", "ss_corr", "sqrt", "quantile", "TDist", "cdf", "Normal", "detectionmap", "position", "x", "y", "cy", "cx", "center", "separation", "NaN", "floor", "dθ", "RotMatrix", "rx", "ry", "fluxes", "eachindex", "ap_x", "ap_y", "SA", "ap", "CircularAperture", "photometry", "aperture_sum", "other_elements", "bkg_σ", "CartesianIndex", "reverse", "significance", "_snr", "snr_to_sig", "dof", "float", "sig_to_snr", "sig", "stim_threshold", "stimmap", "residuals", "d_opp", "stim", "n_ϵ", "count", ".>", "d", "σ", "zero", "mask", "!", "iszero", "dropdims", "test_method", "func", "zeros", "101", "77", "1.0", "@test", "51", "≈"],
  entity : Entity → value = Any[],
  ontology : Ontology → value = Any[],
  block : Code_block → value = Any[  1:69    1:2   OP: =
  1:21   call
  1:11    examplesdir
 12:18      1:3   OP: ...
 12:15     args
 22:67   block
 22:67    call
 22:29     joinpath
 30:37     macrocall
 30:37      @__DIR__
 38:37      NOTHING: nothing
 38:41     STRING: ..
 42:51     STRING: examples
 52:58       1:3   OP: ...
 52:55      args,   1:43    1:2   OP: =
  1:24   call
  1:7     Classic
  8:20    parameters
  8:20     kw
  8:13      method
 14:19      median
 25:41   block
 25:41    call
 25:31     Classic
 32:37     method,   1:40    1:2   OP: =
  1:27   call
  1:6     design
  7:24      1:2   OP: ::
  7:9      des
 10:22     ClassicDesign
 28:38   block
 28:38      1:1   OP: .
 28:30     des
 31:37     quotenode
 31:37      frame,   1:64    1:2   OP: =
  1:32   call
  1:11    reconstruct
 12:29      1:2   OP: ::
 12:14     des
 15:27     ClassicDesign
 33:62   block
 33:62    call
 33:42     TiledArray
 43:51       1:1   OP: .
 43:45      des
 46:50      quotenode
 46:50       frame
 52:56       1:1   OP: .
 52:54      des
 55:55      quotenode
 55:55       n,   1:191 function
  1:65   call
  1:3     fit
  4:22    parameters
  4:11     kw
  4:6       ref
  7:10      data
 12:20       1:3   OP: ...
 12:17      kwargs
 23:34      1:2   OP: ::
 23:25     alg
 26:32     Classic
 35:56      1:2   OP: ::
 35:38     data
 39:54     AbstractMatrix
 66:136  block
 66:87      1:2   OP: =
 66:67     n
 68:85     call
 68:71      size
 72:75      data
 76:76      INTEGER: 1
 88:136   return
 88:129    call
 88:100     ClassicDesign
101:101     n
102:124     call
102:111        1:1   OP: .
102:104       alg
105:110       quotenode
105:110        method
112:114      ref
115:120      kw
115:118       dims
119:119       INTEGER: 1,   1:48    1:2   OP: =
  1:25   call
  1:9       1:1   OP: .
  1:4      Base
  5:8      quotenode
  5:8       size
 10:22      1:2   OP: ::
 10:10     t
 11:20     TiledArray
 26:46   block
 26:46    call
 26:28     map
 29:34     length
 35:41     call
 35:38      axes
 39:39      t,   1:71    1:2   OP: =
  1:25   call
  1:9       1:1   OP: .
  1:4      Base
  5:8      quotenode
  5:8       axes
 10:22      1:2   OP: ::
 10:10     t
 11:20     TiledArray
 26:69   block
 26:69    tuple
 26:36       1:1   OP: .
 26:26      t
 27:35      quotenode
 27:35       tilerange
 37:64       1:3   OP: ...
 37:61      call
 37:45         1:1   OP: .
 37:40        Base
 41:44        quotenode
 41:44         tail
 46:59       call
 46:49        axes
 50:57          1:1   OP: .
 50:50         t
 51:56         quotenode
 51:56          parent,   1:39    1:2   OP: =
  1:27   call
  1:11      1:1   OP: .
  1:4      Base
  5:10     quotenode
  5:10      parent
 12:24      1:2   OP: ::
 12:12     t
 13:22     TiledArray
 28:37   block
 28:37      1:1   OP: .
 28:28     t
 29:36     quotenode
 29:36      parent,   1:79    1:2   OP: =
  1:42   call
  1:10    TiledArray
 11:31      1:2   OP: ::
 11:16     parent
 17:29     AbstractArray
 32:37      1:2   OP: ::
 32:32     n
 33:35     Int
 43:77   block
 43:77    call
 43:52     TiledArray
 53:58     parent
 59:71     call
 59:68        1:1   OP: .
 59:62       Base
 63:67       quotenode
 63:67        OneTo
 69:69      n,   1:365 function
  1:57   call
  1:3     fit
  4:12    parameters
  4:12       1:3   OP: ...
  4:9       kwargs
 13:29      1:2   OP: ::
 13:15     alg
 16:27     ADIAlgorithm
 30:48      1:2   OP: ::
 30:33     cube
 34:46     AnnulusView
 58:351  block
 58:89      1:2   OP: =
 58:62     data
 63:87     call
 63:66      cube
 67:70      TRUE: true
 90:318   if
 90:118    call
 90:92      OP: in
 93:97      quotenode
 93:96       ref
 98:118     call
 98:101      keys
102:107      kwargs
119:307    block
119:218       1:3   OP: ||
119:147      call
119:122       OP: isa
123:135       ref
123:128        kwargs
129:132        quotenode
129:131         ref
136:147       AnnulusView
148:215      call
148:152       error
153:204       STRING: reference data geometry does not match target data
219:256       1:2   OP: =
219:227      ref_data
228:254      call
228:239       ref
228:233        kwargs
234:237        quotenode
234:236         ref
240:243       TRUE: true
257:307     return
257:300      call
257:259       fit
260:282       parameters
260:268          1:3   OP: ...
260:265         kwargs
269:280        kw
269:271         ref
272:279         ref_data
283:285       alg
286:291       data
319:351   return
319:344    call
319:321     fit
322:330     parameters
322:330        1:3   OP: ...
322:327       kwargs
331:333     alg
334:339     data,   1:508 function
  1:62   call
  1:3     fit
  4:12    parameters
  4:12       1:3   OP: ...
  4:9       kwargs
 13:29      1:2   OP: ::
 13:15     alg
 16:27     ADIAlgorithm
 30:53      1:2   OP: ::
 30:33     cube
 34:51     MultiAnnulusView
 63:494  block
 63:494   if
 63:91     call
 63:65      OP: in
 66:70      quotenode
 66:69       ref
 71:91      call
 71:74       keys
 75:80       kwargs
 92:390    block
 92:196       1:3   OP: ||
 92:125      call
 92:95        OP: isa
 96:108       ref
 96:101        kwargs
102:105        quotenode
102:104         ref
109:125       MultiAnnulusView
126:193      call
126:130       error
131:182       STRING: reference data geometry does not match target data
197:235       1:2   OP: =
197:201      anns
202:233      call
202:212       eachannulus
213:216       cube
217:220       TRUE: true
236:286       1:2   OP: =
236:244      ref_anns
245:284      call
245:255       eachannulus
256:267       ref
256:261        kwargs
262:265        quotenode
262:264         ref
268:271       TRUE: true
287:390     return
287:383      call
287:297       StructArray
298:376       generator
298:335        call
298:300         fit
301:322         parameters
301:309            1:3   OP: ...
301:306           kwargs
310:320          kw
310:312           ref
313:319           ref_ann
323:325         alg
326:330         ann
336:372          1:0   OP: =
336:350         tuple
336:338          ann
339:345          ref_ann
351:369         call
351:353          zip
354:357          anns
358:365          ref_anns
391:474    block
391:474     return
391:467      call
391:401       StructArray
402:460       generator
402:426        call
402:404         fit
405:413         parameters
405:413            1:3   OP: ...
405:410           kwargs
414:416         alg
417:421         ann
427:456          1:0   OP: =
427:430         ann
431:453         call
431:441          eachannulus
442:445          cube
446:449          TRUE: true,   1:592 function
  1:81   call
  1:3     fit
  4:12    parameters
  4:12       1:3   OP: ...
  4:9       kwargs
 13:48      1:2   OP: ::
 13:16     algs
 17:46     curly
 17:30      AbstractVector
 31:44        1:2   OP: <:
 31:42       ADIAlgorithm
 49:72      1:2   OP: ::
 49:52     cube
 53:70     MultiAnnulusView
 82:578  block
 82:578   if
 82:110    call
 82:84      OP: in
 85:89      quotenode
 85:88       ref
 90:110     call
 90:93       keys
 94:99       kwargs
111:438    block
111:215       1:3   OP: ||
111:144      call
111:114       OP: isa
115:127       ref
115:120        kwargs
121:124        quotenode
121:123         ref
128:144       MultiAnnulusView
145:212      call
145:149       error
150:201       STRING: reference data geometry does not match target data
216:254       1:2   OP: =
216:220      anns
221:252      call
221:231       eachannulus
232:235       cube
236:239       TRUE: true
255:305       1:2   OP: =
255:263      ref_anns
264:303      call
264:274       eachannulus
275:286       ref
275:280        kwargs
281:284        quotenode
281:283         ref
287:290       TRUE: true
306:345       1:2   OP: =
306:309      itr
310:343      call
310:312       zip
313:316       algs
317:320       anns
321:328       ref_anns
346:438     return
346:431      call
346:356       StructArray
357:424       generator
357:394        call
357:359         fit
360:381         parameters
360:368            1:3   OP: ...
360:365           kwargs
369:379          kw
369:371           ref
372:378           ref_ann
382:384         alg
385:389         ann
395:420          1:0   OP: =
395:414         tuple
395:397          alg
398:400          ann
401:407          ref_ann
415:417         itr
439:558    block
439:487       1:2   OP: =
439:442      itr
443:485      call
443:445       zip
446:449       algs
450:472       call
450:460        eachannulus
461:464        cube
465:468        TRUE: true
488:558     return
488:551      call
488:498       StructArray
499:544       generator
499:523        call
499:501         fit
502:510         parameters
502:510            1:3   OP: ...
502:507           kwargs
511:513         alg
514:518         ann
524:540          1:0   OP: =
524:534         tuple
524:526          alg
527:529          ann
535:537         itr,   1:151 function
  1:38   call
  1:11    reconstruct
 12:20    parameters
 12:20       1:3   OP: ...
 12:17      kwargs
 21:23    alg
 24:29    cube
 39:137  block
 39:77      1:2   OP: =
 39:45     design
 46:75     call
 46:48      fit
 49:57      parameters
 49:57         1:3   OP: ...
 49:54        kwargs
 58:60      alg
 61:66      cube
 78:105     1:2   OP: =
 78:79     S
 80:103    call
 80:90      reconstruct
 91:96      design
106:137   return
106:130    call
106:120     expand_geometry
121:124     cube
125:125     S,   1:61    1:2   OP: =
  1:40   call
  1:15    expand_geometry
 16:32      1:2   OP: ::
 16:19     cube
 20:30     AnnulusView
 33:35    arr
 41:59   block
 41:59    call
 41:47     inverse
 48:51     cube
 52:54     arr,   1:69    1:2   OP: =
  1:46   call
  1:15    expand_geometry
 16:37      1:2   OP: ::
 16:19     cube
 20:35     MultiAnnulusView
 38:41    arrs
 47:67   block
 47:67    call
 47:53     inverse
 54:57     cube
 58:61     arrs,   1:110 function
  1:35   call
  1:8     subtract
  9:17    parameters
  9:17       1:3   OP: ...
  9:14      kwargs
 18:20    alg
 21:26    cube
 36:94   block
 36:77      1:2   OP: =
 36:37     S
 38:75     call
 38:48      reconstruct
 49:57      parameters
 49:57         1:3   OP: ...
 49:54        kwargs
 58:60      alg
 61:66      cube
 78:94    return
 78:87     call
 78:80      OP: .-
 81:85      cube
 86:87      S,   1:171 function
  1:60   call
  1:7     process
  8:34    parameters
  8:23     kw
  8:13      method
 14:22      quotenode
 14:21       deweight
 24:32       1:3   OP: ...
 24:29      kwargs
 35:37    alg
 38:41    cube
 42:49    angles
 61:157  block
 61:114     1:2   OP: =
 61:62     R
 63:112    call
 63:70      subtract
 71:94      parameters
 71:83       kw
 71:76        angles
 77:82        angles
 84:92         1:3   OP: ...
 84:89        kwargs
 95:97      alg
 98:103     cube
115:157   return
115:150    call
115:123     collapse!
124:124     R
125:130     angles
131:143     kw
131:136      method
137:142      method,   1:74    1:2   OP: =
  1:40   call
  1:19    brackets
  1:17       1:2   OP: ::
  1:3       alg
  4:15      ADIAlgorithm
 20:28    parameters
 20:28       1:3   OP: ...
 20:25      kwargs
 29:37      1:5   OP: ...
 29:32     args
 41:72   block
 41:72    call
 41:47     process
 48:56     parameters
 48:56        1:3   OP: ...
 48:53       kwargs
 57:59     alg
 60:68       1:5   OP: ...
 60:63      args,   1:79    1:2   OP: =
  1:50   call
  1:11    reconstruct
 12:47      1:2   OP: ::
 12:18     designs
 19:45     curly
 19:32      AbstractVector
 33:43        1:2   OP: <:
 33:41       ADIDesign
 51:77   block
 51:77    call
 51:53     map
 54:64     reconstruct
 65:71     designs,   1:50    1:2   OP: =
  1:26   call
  1:6     design
  7:23      1:2   OP: ::
  7:9      des
 10:21     LinearDesign
 27:48   block
 27:48    tuple
 27:35       1:1   OP: .
 27:29      des
 30:34      quotenode
 30:34       basis
 36:46       1:1   OP: .
 36:38      des
 39:45      quotenode
 39:45       coeffs,   1:56    1:2   OP: =
  1:31   call
  1:11    reconstruct
 12:28      1:2   OP: ::
 12:14     des
 15:26     LinearDesign
 32:54   block
 32:54    call
 32:33     OP: *
 34:44       1:1   OP: .
 34:36      des
 37:43      quotenode
 37:43       coeffs
 45:54       1:1   OP: .
 45:47      des
 48:53      quotenode
 48:53       basis,   1:72    1:2   OP: =
  1:41   call
  1:12      1:1   OP: .
  1:4      Base
  5:11     quotenode
  5:11      iterate
 13:29      1:2   OP: ::
 13:15     des
 16:27     LinearDesign
 30:36    kw
 30:34     state
 35:35     INTEGER: 1
 42:70   block
 42:70    call
 42:48     iterate
 49:59     call
 49:54      design
 55:57      des
 60:64     state,   1:75    1:2   OP: =
  1:39   call
  1:9     Framewise
 10:31    parameters
 10:18     kw
 10:14      limit
 15:17      Inf
 19:29     kw
 19:27      delta_rot
 28:28      INTEGER: 1
 32:36    alg
 40:73   block
 40:73    call
 40:48     Framewise
 49:51     alg
 52:56     limit
 57:65     delta_rot,   1:564 function
  1:93   call
  1:11    reconstruct
 12:51    parameters
 12:17     angles
 18:21     fwhm
 22:36     kw
 22:22      r
 23:35      call
 23:29       _radius
 30:33       cube
 37:45       1:3   OP: ...
 37:42      kwargs
 52:65      1:2   OP: ::
 52:54     alg
 55:63     Framewise
 66:84      1:2   OP: ::
 66:69     cube
 70:82     AnnulusView
 94:550  block
 94:162     1:2   OP: =
 94:106    pa_threshold
107:160    call
107:123     compute_pa_thresh
124:129     angles
130:130     r
131:134     fwhm
135:147       1:1   OP: .
135:137      alg
138:146      quotenode
138:146       delta_rot
163:194     1:2   OP: =
163:167    data
168:192    call
168:171     cube
172:175     TRUE: true
195:216     1:2   OP: =
195:196    S
197:214    call
197:203     similar
204:207     data
217:526   macrocall
217:233      1:1   OP: .
217:223     Threads
224:232     quotenode
224:232      @threads
234:233    NOTHING: nothing
234:526    for
234:257       1:0   OP: =
234:235      i
236:254      call
236:239       axes
240:240       S
241:241       INTEGER: 1
258:514     block
258:326        1:2   OP: =
258:262       inds
263:324       call
263:273        find_angles
274:288        parameters
274:288         kw
274:278          limit
279:287            1:1   OP: .
279:281           alg
282:286           quotenode
282:286            limit
289:294        angles
295:295        i
296:309        pa_threshold
327:356        1:2   OP: =
327:333       target
334:354       ref
334:337        data
338:340        call
338:338         OP: :
339:339         i
340:340         i
341:341        OP: :
357:384        1:2   OP: =
357:360       ref
361:382       ref
361:364        data
365:368        inds
369:369        OP: :
385:412        1:2   OP: =
385:389       angs
390:410       ref
390:395        angles
396:399        inds
413:483        1:2   OP: =
413:416       des
417:481       call
417:419        fit
420:450        parameters
420:428           1:3   OP: ...
420:425          kwargs
429:435         kw
429:431          ref
432:434          ref
436:446         kw
436:441          angles
442:445          angs
451:460          1:1   OP: .
451:453         alg
454:459         quotenode
454:459          kernel
461:468        target
484:514        1:2   OP: =
484:491       ref
484:484        S
485:485        i
486:486        OP: :
492:512       call
492:502        reconstruct
503:505        des
527:550   return
527:543    call
527:533     inverse
534:537     cube
538:538     S,   1:68    1:2   OP: =
  1:27   call
  1:7     _radius
  8:24      1:2   OP: ::
  8:11     cube
 12:22     AnnulusView
 28:66   block
 28:66    call
 28:29     OP: +
 30:39       1:1   OP: .
 30:33      cube
 34:38      quotenode
 34:38       rmin
 40:66     call
 40:40      OP: /
 41:63      brackets
 41:61       call
 41:42        OP: -
 43:52          1:1   OP: .
 43:46         cube
 47:51         quotenode
 47:51          rmax
 53:61          1:1   OP: .
 53:56         cube
 57:60         quotenode
 57:60          rmin
 64:66      INTEGER: 2,   1:1113 function
  1:92   call
  1:11    reconstruct
 12:45    parameters
 12:17     angles
 18:32     kw
 18:21      fwhm
 22:31        1:1   OP: .
 22:25       cube
 26:30       quotenode
 26:30        width
 33:41       1:3   OP: ...
 33:38      kwargs
 46:59      1:2   OP: ::
 46:48     alg
 49:57     Framewise
 60:83      1:2   OP: ::
 60:63     cube
 64:81     MultiAnnulusView
 93:1099  block
 93:109   local
 93:103    recons
110:155     1:2   OP: =
110:114    anns
115:153    call
115:125     eachannulus
126:129     cube
130:133     TRUE: true
156:188     1:2   OP: =
156:161    N_ann
162:186    call
162:167     length
168:179       1:1   OP: .
168:171      cube
172:178      quotenode
172:178       indices
189:247     1:2   OP: =
189:199    delta_rots
200:245    call
200:218     _normalize_deltarot
219:231       1:1   OP: .
219:221      alg
222:230      quotenode
222:230       delta_rot
232:236     N_ann
248:1070   macrocall
248:261    @withprogress
262:261    NOTHING: nothing
262:276      1:1   OP: =
262:265     name
266:275     STRING: annulus
277:1070    block
277:294       1:2   OP: =
277:282      i_ann
283:292      INTEGER: 0
295:1047       1:2   OP: =
295:301      recons
302:1045      do
302:335       call
302:304        map
305:308        anns
309:318          1:1   OP: .
309:312         cube
313:317         quotenode
313:317          radii
319:328        delta_rots
336:1034         1:0   OP: ->
336:365        tuple
336:338         ann
339:339         r
340:361         delta_rot
366:1034        block
366:438           1:2   OP: =
366:378          pa_threshold
379:436          call
379:395           compute_pa_thresh
396:401           angles
402:402           r
403:406           fwhm
407:415           delta_rot
439:499         macrocall
439:445          @debug
446:445          NOTHING: nothing
446:499          string
446:457           STRING: PA thresh: 
458:469           pa_threshold
470:482           STRING:  Ann center: 
483:483           r
500:528           1:2   OP: =
500:501          S
502:526          call
502:508           similar
509:511           ann
529:937         macrocall
529:535          @views
536:535          NOTHING: nothing
536:937          macrocall
536:552             1:1   OP: .
536:542            Threads
543:551            quotenode
543:551             @threads
553:552           NOTHING: nothing
553:937           for
553:584              1:0   OP: =
553:554             j
555:581             call
555:558              axes
559:559              S
560:560              INTEGER: 1
585:887            block
585:661               1:2   OP: =
585:589              inds
590:659              call
590:600               find_angles
601:615               parameters
601:615                kw
601:605                 limit
606:614                   1:1   OP: .
606:608                  alg
609:613                  quotenode
609:613                   limit
616:621               angles
622:622               j
623:636               pa_threshold
662:698               1:2   OP: =
662:668              target
669:696              ref
669:671               ann
672:674               call
672:672                OP: :
673:673                j
674:674                j
675:675               OP: :
699:733               1:2   OP: =
699:702              ref
703:731              ref
703:705               ann
706:709               inds
710:710               OP: :
734:769               1:2   OP: =
734:738              angs
739:767              ref
739:744               angles
745:748               inds
770:848               1:2   OP: =
770:773              des
774:846              call
774:776               fit
777:807               parameters
777:785                  1:3   OP: ...
777:782                 kwargs
786:792                kw
786:788                 ref
789:791                 ref
793:803                kw
793:798                 angles
799:802                 angs
808:817                 1:1   OP: .
808:810                alg
811:816                quotenode
811:816                 kernel
818:825               target
849:887               1:2   OP: =
849:856              ref
849:849               S
850:850               j
851:851               OP: :
857:885              call
857:867               reconstruct
868:870               des
938:960           1:3   OP: +=
938:943          i_ann
944:957          INTEGER: 1
961:1017         macrocall
961:973          @logprogress
974:973          NOTHING: nothing
974:985          call
974:974           OP: /
975:979           i_ann
980:985           N_ann
986:1017            1:1   OP: =
986:991           thresh
992:1016           pa_threshold
1018:1034         return
1018:1027          S
1071:1099   return
1071:1092    call
1071:1077     inverse
1078:1081     cube
1082:1087     recons,   1:55    1:2   OP: =
  1:34   call
  1:19    _normalize_deltarot
 20:28    delta_rot
 29:29    N
 35:53   block
 35:53    call
 35:38     Fill
 39:47     delta_rot
 48:48     N,   1:73    1:2   OP: =
  1:41   call
  1:19    _normalize_deltarot
 20:35      1:2   OP: ::
 20:28     delta_rot
 29:33     Tuple
 36:36    N
 42:71   block
 42:71    call
 42:46     range
 47:58       1:3   OP: ...
 47:55      delta_rot
 59:66     kw
 59:64      length
 65:65      N,   1:63    1:2   OP: =
  1:50   call
  1:19    _normalize_deltarot
 20:44      1:2   OP: ::
 20:28     delta_rot
 29:42     AbstractVector
 45:45    N
 51:61   block
 51:61    delta_rot,   1:1167 function
  1:110  call
  1:11    reconstruct
 12:45    parameters
 12:17     angles
 18:32     kw
 18:21      fwhm
 22:31        1:1   OP: .
 22:25       cube
 26:30       quotenode
 26:30        width
 33:41       1:3   OP: ...
 33:38      kwargs
 46:77      1:2   OP: ::
 46:48     alg
 49:75     curly
 49:57      Framewise
 58:73        1:2   OP: <:
 58:71       AbstractVector
 78:101     1:2   OP: ::
 78:81     cube
 82:99     MultiAnnulusView
111:1112  block
111:156     1:2   OP: =
111:115    anns
116:154    call
116:126     eachannulus
127:130     cube
131:134     TRUE: true
157:189     1:2   OP: =
157:162    N_ann
163:187    call
163:168     length
169:180       1:1   OP: .
169:172      cube
173:179      quotenode
173:179       indices
190:248     1:2   OP: =
190:200    delta_rots
201:246    call
201:219     _normalize_deltarot
220:232       1:1   OP: .
220:222      alg
223:231      quotenode
223:231       delta_rot
233:237     N_ann
249:265   local
249:259    recons
266:1083   macrocall
266:279    @withprogress
280:279    NOTHING: nothing
280:294      1:1   OP: =
280:283     name
284:293     STRING: annulus
295:1083    block
295:312       1:2   OP: =
295:300      i_ann
301:310      INTEGER: 0
313:1061       1:2   OP: =
313:319      recons
320:1059      do
320:365       call
320:322        map
323:326        anns
327:336          1:1   OP: .
327:330         cube
331:335         quotenode
331:335          radii
337:346          1:1   OP: .
337:339         alg
340:345         quotenode
340:345          kernel
347:356        delta_rots
366:1048         1:0   OP: ->
366:401        tuple
366:368         ann
369:369         r
370:373         _alg
374:395         delta_rot
402:1048        block
402:474           1:2   OP: =
402:414          pa_threshold
415:472          call
415:431           compute_pa_thresh
432:437           angles
438:438           r
439:442           fwhm
443:451           delta_rot
475:503           1:2   OP: =
475:476          S
477:501          call
477:483           similar
484:486           ann
504:971         macrocall
504:510          @views
511:510          NOTHING: nothing
511:971          macrocall
511:527             1:1   OP: .
511:517            Threads
518:526            quotenode
518:526             @threads
528:527           NOTHING: nothing
528:971           for
528:559              1:0   OP: =
528:529             j
530:556             call
530:533              axes
534:534              S
535:535              INTEGER: 1
560:921            block
560:624             macrocall
560:566              @debug
567:566              NOTHING: nothing
567:624              string
567:578               STRING: PA thresh: 
579:590               pa_threshold
591:603               STRING:  Ann center: 
604:604               r
625:701               1:2   OP: =
625:629              inds
630:699              call
630:640               find_angles
641:655               parameters
641:655                kw
641:645                 limit
646:654                   1:1   OP: .
646:648                  alg
649:653                  quotenode
649:653                   limit
656:661               angles
662:662               j
663:676               pa_threshold
702:738               1:2   OP: =
702:708              target
709:736              ref
709:711               ann
712:714               call
712:712                OP: :
713:713                j
714:714                j
715:715               OP: :
739:773               1:2   OP: =
739:742              ref
743:771              ref
743:745               ann
746:749               inds
750:750               OP: :
774:809               1:2   OP: =
774:778              angs
779:807              ref
779:784               angles
785:788               inds
810:882               1:2   OP: =
810:813              des
814:880              call
814:816               fit
817:847               parameters
817:825                  1:3   OP: ...
817:822                 kwargs
826:832                kw
826:828                 ref
829:831                 ref
833:843                kw
833:838                 angles
839:842                 angs
848:851               _alg
852:859               target
883:921               1:2   OP: =
883:890              ref
883:883               S
884:884               j
885:885               OP: :
891:919              call
891:901               reconstruct
902:904               des
972:994           1:3   OP: +=
972:977          i_ann
978:991          INTEGER: 1
995:1031         macrocall
995:1007          @logprogress
1008:1007          NOTHING: nothing
1008:1031          call
1008:1008           OP: /
1009:1013           i_ann
1014:1031           N_ann
1032:1048         return
1032:1041          S
1084:1112   return
1084:1105    call
1084:1090     inverse
1091:1094     cube
1095:1100     recons,   1:350 function
  1:50   call
  1:17    compute_pa_thresh
 18:23    angles
 24:24    r
 25:28    fwhm
 29:37    delta_rot
 51:336  block
 51:102     1:2   OP: =
 51:63     pa_threshold
 64:100    call
 64:65      OP: *
 66:67      INTEGER: 2
 68:100     call
 68:72       atand
 73:88       call
 73:74        OP: *
 75:84        delta_rot
 85:88        fwhm
 89:90       call
 89:88        OP: *
 89:89        INTEGER: 2
 90:90        r
103:161     1:2   OP: =
103:112    mid_range
113:159    call
113:114     OP: /
115:153     call
115:117      abs
118:150      call
118:119       OP: -
120:135       call
120:126        maximum
127:132        angles
136:150       call
136:142        minimum
143:148        angles
154:159     INTEGER: 2
162:185     1:2   OP: =
162:163    k
164:183    call
164:165     OP: *
166:175     mid_range
176:183     FLOAT: 0.9
186:316   if
186:212    call
186:189     OP: ≥
190:202     pa_threshold
203:212     k
213:305    block
213:284     macrocall
213:218      @info
219:218      NOTHING: nothing
219:284      string
219:232       STRING: pa threshold 
233:244       pa_threshold
245:271       STRING:  too large, will be set to 
272:272       k
285:305       1:2   OP: =
285:297      pa_threshold
298:303      k
317:336   return
317:329    pa_threshold,   1:716 function
  1:48   call
  1:11    find_angles
 12:20    parameters
 12:20     kw
 12:16      limit
 17:19      Inf
 21:26    angles
 27:29    idx
 30:37    thresh
 49:703  block
 49:103     1:2   OP: =
 49:59     tuple
 49:52      fidx
 53:57      lidx
 60:101    tuple
 60:77      call
 60:69       firstindex
 70:75       angles
 78:99      call
 78:86       lastindex
 87:92       angles
104:124     1:2   OP: =
104:108    tuple
104:104     p
105:106     n
109:122    tuple
109:112     fidx
113:120     idx
125:285   for
125:148      1:0   OP: =
125:126     i
127:145     call
127:127      OP: :
128:131      fidx
132:145      call
132:132       OP: -
133:135       idx
136:145       INTEGER: 1
149:273    block
149:273     if
149:198      call
149:150       OP: <
151:179       call
151:153        abs
154:176        call
154:155         OP: -
156:167         ref
156:161          angles
162:164          idx
168:176         ref
168:173          angles
174:174          i
180:198       thresh
199:230      block
199:216         1:2   OP: =
199:200        p
201:214        i
217:230       BREAK
231:245      block
231:245         1:3   OP: +=
231:232        p
233:242        INTEGER: 1
286:444   for
286:307      1:0   OP: =
286:287     k
288:304     call
288:288      OP: :
289:291      idx
292:304      lidx
308:432    block
308:432     if
308:357      call
308:309       OP: >
310:338       call
310:312        abs
313:335        call
313:314         OP: -
315:324         ref
315:320          angles
321:321          k
325:335         ref
325:330          angles
331:333          idx
339:357       thresh
358:389      block
358:375         1:2   OP: =
358:359        n
360:373        k
376:389       BREAK
390:404      block
390:404         1:3   OP: +=
390:391        n
392:401        INTEGER: 1
445:668   if
445:468    call
445:452     isfinite
453:457     limit
469:589    block
469:496       1:2   OP: =
469:475      window
476:494      call
476:478       OP: ÷
479:484       limit
485:494       INTEGER: 2
497:545       1:2   OP: =
497:507      first_half
508:543      call
508:508       OP: :
509:529       call
509:511        max
512:521        call
512:513         OP: -
514:515         p
516:521         window
522:525        fidx
530:543       call
530:531        OP: -
532:533        p
534:543        INTEGER: 1
546:589       1:2   OP: =
546:555      last_half
556:587      call
556:556       OP: :
557:557       n
558:587       call
558:559        OP: -
560:581        call
560:562         min
563:572         call
563:564          OP: +
565:566          n
567:572          window
573:576         lidx
582:587        INTEGER: 1
590:644    block
590:621       1:2   OP: =
590:600      first_half
601:619      call
601:601       OP: :
602:605       fidx
606:619       call
606:607        OP: -
608:609        p
610:619        INTEGER: 1
622:644       1:2   OP: =
622:631      last_half
632:642      call
632:632       OP: :
633:633       n
634:642       lidx
669:703   return
669:696    call
669:672     vcat
673:682     first_half
683:691     last_half,   1:56    1:2   OP: =
  1:31   call
  1:6     GreeDS
  7:17    parameters
  7:17     kw
  7:15      threshold
 16:16      INTEGER: 0
 18:28    kw
 18:20     alg
 21:27     call
 21:23      PCA
 32:54   block
 32:54    call
 32:37     GreeDS
 38:40     alg
 41:49     threshold,   1:99    1:2   OP: =
  1:44   call
  1:6     GreeDS
  7:28    parameters
  7:17     kw
  7:15      threshold
 16:16      INTEGER: 0
 18:26       1:3   OP: ...
 18:23      kwargs
 29:41      1:2   OP: ::
 29:34     ncomps
 35:39     Int
 45:97   block
 45:97    call
 45:50     GreeDS
 51:72     call
 51:53      PCA
 54:62      parameters
 54:62         1:3   OP: ...
 54:59        kwargs
 63:70      ncomps
 73:91     kw
 73:81      threshold
 82:90      threshold,   1:1096 function
  1:93   call
  1:3     fit
  4:43    parameters
  4:9      angles
 10:30     kw
 10:25        1:2   OP: ::
 10:12       ref
 13:23       AnnulusView
 26:29      data
 31:39       1:3   OP: ...
 31:36      kwargs
 44:65      1:2   OP: ::
 44:46     alg
 47:63     curly
 47:52      GreeDS
 53:61        1:2   OP: <:
 53:59       PCALIKE
 66:84      1:2   OP: ::
 66:69     data
 70:82     AnnulusView
 94:1082  block
 94:113     1:2   OP: =
 94:100    target
101:111    call
101:104     data
114:207     1:2   OP: =
114:120    tmpAnn
121:205    call
121:124     copy
125:128     data
208:333     1:2   OP: =
208:218    max_ncomps
219:331    call
219:228     get_ncomps
229:245       1:1   OP: .
229:238        1:1   OP: .
229:231       alg
232:237       quotenode
232:237        kernel
239:244      quotenode
239:244       ncomps
246:251     target
334:352     1:2   OP: =
334:335    f
336:350      1:1   OP: .
336:338     alg
339:349     quotenode
339:349      kernel
353:378     1:2   OP: =
353:354    f
355:376    macrocall
355:359     @set
360:359     NOTHING: nothing
360:376       1:2   OP: =
360:368        1:1   OP: .
360:360       f
361:367       quotenode
361:367        ncomps
369:374      INTEGER: 1
379:406     1:2   OP: =
379:385    design
386:404    call
386:388     fit
389:389     f
390:395     target
407:459     1:2   OP: =
407:408    R
409:457    call
409:415     inverse
416:419     data
420:448     call
420:422      OP: .-
423:429      target
430:448      call
430:440       reconstruct
441:446       design
460:494     1:2   OP: =
460:467    reduced
468:492    call
468:476     collapse!
477:477     R
478:483     angles
495:945   macrocall
495:504    @progress
505:504    NOTHING: nothing
505:518      1:1   OP: =
505:508     name
509:517     STRING: GreeDS
519:945    for
519:544       1:0   OP: =
519:520      n
521:541      call
521:521       OP: :
522:522       INTEGER: 1
523:541       max_ncomps
545:933     block
545:615        1:3   OP: .=
545:551       tmpAnn
552:612       call
552:554        OP: .-
555:558        ref
559:612        call
559:571         expand_rotate
572:578         reduced
579:584         angles
585:597           1:1   OP: .
585:587          alg
588:596          quotenode
588:596           threshold
616:690        1:2   OP: =
616:621       resid
622:688       call
622:627        tmpAnn
691:798        1:2   OP: =
691:692       f
693:796       macrocall
693:697        @set
698:697        NOTHING: nothing
698:796          1:2   OP: =
698:706           1:1   OP: .
698:698          f
699:705          quotenode
699:705           ncomps
707:794         n
799:841        1:2   OP: =
799:805       design
806:839       call
806:808        fit
809:817        parameters
809:817         kw
809:811          ref
812:816          resid
818:818        f
819:826        target
842:898        1:2   OP: =
842:843       R
844:896       call
844:850        inverse
851:854        data
855:883        call
855:857         OP: .-
858:864         target
865:883         call
865:875          reconstruct
876:881          design
899:933        1:2   OP: =
899:906       reduced
907:931       call
907:915        collapse!
916:916        R
917:922        angles
946:1068   if
946:966    call
946:949     OP: !==
950:953     ref
954:966     data
967:1057    block
967:991       1:2   OP: =
967:968      A
969:989        1:1   OP: .
969:974       design
975:988       quotenode
975:988        basis
992:1021       1:2   OP: =
992:999      weights
1000:1019      call
1000:1001       OP: *
1002:1008       call
1002:1005        data
1009:1019         1:10  OP: '
1009:1009        A
1022:1057     return
1022:1050      call
1022:1033       LinearDesign
1034:1034       A
1035:1041       weights
1069:1082   return
1069:1075    design,   1:307 function
  1:55   call
  1:13    expand_rotate
 14:22    parameters
 14:22       1:3   OP: ...
 14:19      kwargs
 23:27    frame
 28:33    angles
 34:44    threshold
 56:294  block
 56:78      1:2   OP: =
 56:57     N
 58:76     call
 58:63      length
 64:69      angles
 79:114     1:2   OP: =
 79:85     _frame
 86:112      1:1   OP: .
 86:88      max
 89:111     tuple
 89:93       frame
 94:102      threshold
115:159     1:2   OP: =
115:119    cube
120:157    call
120:126     similar
127:131     frame
132:132     N
133:146       1:3   OP: ...
133:143      call
133:136       size
137:141       frame
160:282   macrocall
160:176      1:1   OP: .
160:166     Threads
167:175     quotenode
167:175      @threads
177:176    NOTHING: nothing
177:282    for
177:205       1:0   OP: =
177:180      idx
181:202      call
181:184       axes
185:188       cube
189:189       INTEGER: 1
206:270     block
206:270        1:3   OP: .=
206:221       ref
206:209        cube
210:212        idx
213:213        OP: :
214:214        OP: :
222:267       call
222:229        derotate
230:238        parameters
230:238           1:3   OP: ...
230:235          kwargs
239:244        _frame
245:258        call
245:245         OP: -
246:258         ref
246:251          angles
252:254          idx
283:294   return
283:287    cube,   1:37    1:2   OP: =
  1:22   call
  1:3     NMF
  4:17    parameters
  4:17     kw
  4:9       ncomps
 10:16      nothing
 23:35   block
 23:35    call
 23:25     NMF
 26:31     ncomps,   1:312 function
  1:40   call
  1:8     subtract
  9:17    parameters
  9:17       1:3   OP: ...
  9:14      kwargs
 18:25      1:2   OP: ::
 18:20     alg
 21:23     NMF
 26:31    cube
 41:298  block
 41:79      1:2   OP: =
 41:47     target
 48:77     call
 48:66      normalize_nmf_input
 67:70      cube
 80:279   if
 80:108    call
 80:82      OP: in
 83:87      quotenode
 83:86       ref
 88:108     call
 88:91       keys
 92:97       kwargs
109:211    block
109:157       1:2   OP: =
109:113      ref_
114:155      call
114:132       normalize_nmf_input
133:144       ref
133:138        kwargs
139:142        quotenode
139:141         ref
158:211       1:2   OP: =
158:159      S
160:209      call
160:170       reconstruct
171:189       parameters
171:179          1:3   OP: ...
171:176         kwargs
180:187        kw
180:182         ref
183:186         ref_
190:192       alg
193:200       target
212:255    block
212:255       1:2   OP: =
212:213      S
214:253      call
214:224       reconstruct
225:233       parameters
225:233          1:3   OP: ...
225:230         kwargs
234:236       alg
237:244       target
280:298   return
280:291    call
280:282     OP: .-
283:289     target
290:291     S,   1:124 function
  1:30   call
  1:19    normalize_nmf_input
 20:23    data
 31:110  block
 31:98    if
 31:54     call
 31:33      any
 34:37      call
 34:34       OP: <
 35:35       INTEGER: 0
 38:41      data
 55:87     block
 55:87      return
 55:80       call
 55:57        OP: .-
 58:62        data
 63:80        call
 63:69         minimum
 70:73         data
 99:110   return
 99:103    data,   1:47    1:2   OP: =
  1:24   call
  1:3     PCA
  4:13    parameters
  4:13       1:3   OP: ...
  4:10      options
 14:21    ncomps
 25:45   block
 25:45    call
 25:27     PCA
 28:33     ncomps
 34:40     options,   1:58    1:2   OP: =
  1:34   call
  1:3     PCA
  4:29    parameters
  4:17     kw
  4:9       ncomps
 10:16      nothing
 18:27       1:3   OP: ...
 18:24      options
 35:56   block
 35:56    call
 35:37     PCA
 38:43     ncomps
 44:50     options,   1:491 function
  1:127  call
  1:3     fit
  4:22    parameters
  4:11     kw
  4:6       ref
  7:10      data
 12:20       1:3   OP: ...
 12:17      kwargs
 23:30      1:2   OP: ::
 23:25     alg
 26:28     PCA
 31:52      1:2   OP: ::
 31:34     data
 35:50     AbstractMatrix
128:410  block
128:229     1:2   OP: =
128:129    k
130:227    call
130:139     get_ncomps
140:150     parameters
140:150        1:3   OP: ...
140:147         1:1   OP: .
140:142        alg
143:146        quotenode
143:146         opts
151:160       1:1   OP: .
151:153      alg
154:159      quotenode
154:159       ncomps
161:165     ref
230:328     1:2   OP: =
230:236    decomp
237:326    call
237:239     svd
240:251     call
240:246      collect
247:249      ref
329:354     1:2   OP: =
329:330    P
331:352    ref
331:339       1:1   OP: .
331:336      decomp
337:338      quotenode
337:338       Vt
340:342     call
340:340      OP: :
341:341      INTEGER: 1
342:342      k
343:343     OP: :
355:378     1:2   OP: =
355:362    weights
363:376    call
363:364     OP: *
365:369     data
370:376       1:6   OP: '
370:370      P
379:410   return
379:403    call
379:390     LinearDesign
391:391     P
392:398     weights,   1:60    1:2   OP: =
  1:36   call
  1:10    get_ncomps
 11:19    parameters
 11:19       1:3   OP: ...
 11:16      kwargs
 20:25      1:2   OP: ::
 20:20     n
 21:23     Int
 26:31    data
 37:58   block
 37:58    call
 37:39     min
 40:40     n
 41:53     call
 41:44      size
 45:48      data
 49:49      INTEGER: 1,   1:93    1:2   OP: =
  1:39   call
  1:10    get_ncomps
 11:19    parameters
 11:19       1:3   OP: ...
 11:16      kwargs
 20:28      1:2   OP: ::
 20:26     Nothing
 29:34    data
 40:91   block
 40:91    call
 40:43     size
 44:47     data
 48:48     INTEGER: 1,   1:265 function
  1:43   call
  1:10    get_ncomps
 11:19    parameters
 11:19       1:3   OP: ...
 11:16      kwargs
 20:28      1:2   OP: ::
 20:20     s
 21:26     Symbol
 29:34    data
 44:251  block
 44:251   if
 44:64     call
 44:47      OP: ===
 48:49      s
 50:64      quotenode
 50:63       noise
 65:104    block
 65:104     call
 65:82       noise_decay_ncomps
 83:91       parameters
 83:91          1:3   OP: ...
 83:88         kwargs
 92:97       data
105:244    elseif
105:126     call
105:108      OP: ===
109:110      s
111:126      quotenode
111:125       pratio
127:161     block
127:161      call
127:139       pratio_ncomps
140:148       parameters
140:148          1:3   OP: ...
140:145         kwargs
149:154       data
162:224     block
162:224      call
162:166       error
167:217       STRING: Invalid `ncomps`. Did you mean :noise or :pratio?,   1:1075 function
  1:63   call
  1:18    noise_decay_ncomps
 19:50    parameters
 19:32     kw
 19:26      collapse
 27:31      FALSE: false
 33:48     kw
 33:43      noise_error
 44:47      FLOAT: 1e-3
 51:56    data
 64:1061  block
 64:241   if
 64:80     collapse
 81:182    block
 81:112       1:2   OP: =
 81:83       μ
 84:110      call
 84:87        mean
 88:93        parameters
 88:93         kw
 88:91          dims
 92:92          INTEGER: 1
 94:99        data
113:153       1:2   OP: =
113:116      σ2
117:151      call
117:119       var
120:134       parameters
120:125        kw
120:123         dims
124:124         INTEGER: 1
126:132        kw
126:129         mean
130:131         μ
135:140       data
154:182       1:2   OP: =
154:155      X
156:180      macrocall
156:158       @.
159:158       NOTHING: nothing
159:180       call
159:160        OP: /
161:172        brackets
161:169         call
161:162          OP: -
163:167          data
168:169          μ
173:180        σ2
183:217    block
183:217       1:2   OP: =
183:184      X
185:215      call
185:187       OP: .-
188:192       data
193:215       call
193:196        mean
197:200        data
201:206        kw
201:204         dims
205:205         INTEGER: 1
242:259     1:2   OP: =
242:243    P
244:257      1:1   OP: .
244:249     call
244:246      svd
247:247      X
250:256     quotenode
250:256      Vt
260:284     1:2   OP: =
260:264    tmpr
265:282    call
265:271     similar
272:275     data
285:302     1:2   OP: =
285:288    τ1
289:300      1:2   OP: =
289:292     τ2
293:298     INTEGER: 0
303:1035   macrocall
303:312    @progress
313:312    NOTHING: nothing
313:358      1:1   OP: =
313:316     name
317:357     STRING: Optimizing ncomps using residual noise
359:1035    for
359:389       1:0   OP: =
359:364      ncomp
365:386      call
365:368       axes
369:372       data
373:373       INTEGER: 1
390:1023     block
390:422        1:2   OP: =
390:392       Pv
393:420       macrocall
393:398        @view
399:398        NOTHING: nothing
399:420        ref
399:399         P
400:406         call
400:400          OP: :
401:401          INTEGER: 1
402:406          ncomp
407:407         OP: :
423:523        1:3   OP: .=
423:427       tmpr
428:520       call
428:429        OP: *
430:431        X
432:520        brackets
432:440         call
432:433          OP: -
434:435          I
436:440          call
436:435           OP: *
436:438             1:1   OP: '
436:437            Pv
439:440           Pv
524:646        1:2   OP: =
524:529       noise
530:644       if
530:538        collapse
539:564        call
539:541         std
542:561         call
542:547          median
548:551          tmpr
552:557          kw
552:555           dims
556:556           INTEGER: 1
565:640        call
565:567         std
568:571         tmpr
647:997      if
647:690       call
647:648        OP: >
649:654        ncomp
655:690        call
655:656         OP: +
657:676         call
657:666          firstindex
667:670          data
671:671          INTEGER: 1
677:690         INTEGER: 2
691:945       block
691:731          1:2   OP: =
691:705         px_noise_decay
706:729         call
706:707          OP: -
708:711          τ2
712:729          noise
732:789        macrocall
732:738         @debug
739:738         NOTHING: nothing
739:765           1:1   OP: =
739:749          noise_decay
750:764          px_noise_decay
766:789           1:1   OP: =
766:770          noise
771:788          noise
790:945        if
790:834         call
790:791          OP: <
792:806          px_noise_decay
807:834          noise_error
835:930         block
835:905          macrocall
835:840           @info
841:840           NOTHING: nothing
841:905           string
841:870            STRING: noise threshold reached with 
871:875            ncomp
876:904            STRING:  components
906:930          return
906:923           ncomp
998:1023        1:2   OP: =
998:1006       tuple
998:1000        τ2
1001:1004        τ1
1007:1021       tuple
1007:1009        τ1
1010:1019        noise
1036:1061   return
1036:1054    call
1036:1044     lastindex
1045:1048     data
1049:1049     INTEGER: 1,   1:424 function
  1:36   call
  1:13    pratio_ncomps
 14:23    parameters
 14:23     kw
 14:19      pratio
 20:22      FLOAT: 0.9
 24:29    data
 37:410  block
 37:128   macrocall
 37:43     @debug
 44:43     NOTHING: nothing
 44:128    string
 44:80      STRING: Choosing ncomps required to explain 
 81:90      call
 81:81       OP: *
 82:87       pratio
 88:90       INTEGER: 100
 91:125     STRING: % of data's temporal variance
129:163     1:2   OP: =
129:130    X
131:161    call
131:133     OP: .-
134:138     data
139:161     call
139:142      mean
143:146      data
147:152      kw
147:150       dims
151:151       INTEGER: 1
164:182     1:2   OP: =
164:166    Λ
167:180      1:1   OP: .
167:173     call
167:170      svd!
171:171      X
174:179     quotenode
174:179      S
183:201     1:2   OP: =
183:184    n
185:199    call
185:190     length
191:192     Λ
202:233     1:2   OP: =
202:209    exp_var
210:231    macrocall
210:212     @.
213:212     NOTHING: nothing
213:231     call
213:214      OP: /
215:219      call
215:215       OP: ^
216:217       Λ
218:219       INTEGER: 2
220:231      brackets
220:224       call
220:221        OP: -
222:223        n
224:224        INTEGER: 1
234:284     1:2   OP: =
234:246    ratio_cumsum
247:282    call
247:252     cumsum
253:275     call
253:255      OP: ./
256:263      exp_var
264:275      call
264:266       sum
267:273       exp_var
285:333     1:2   OP: =
285:286    k
287:331    call
287:290     last
291:324     call
291:302      searchsorted
303:314      ratio_cumsum
315:320      pratio
334:401   macrocall
334:339    @info
340:339    NOTHING: nothing
340:401    string
340:349     call
340:340      OP: *
341:346      pratio
347:349      INTEGER: 100
350:378     STRING: % of variance explained with 
379:379     k
380:396     STRING:  components
402:410   return
402:403    k,   1:49    1:2   OP: =
  1:25   call
  1:4     TPCA
  5:14    parameters
  5:14       1:3   OP: ...
  5:11      options
 15:22    ncomps
 26:47   block
 26:47    call
 26:29     TPCA
 30:35     ncomps
 36:42     options,   1:60    1:2   OP: =
  1:35   call
  1:4     TPCA
  5:30    parameters
  5:18     kw
  5:10      ncomps
 11:17      nothing
 19:28       1:3   OP: ...
 19:25      options
 36:58   block
 36:58    call
 36:39     TPCA
 40:45     ncomps
 46:52     options,   1:500 function
  1:213  call
  1:3     fit
  4:22    parameters
  4:11     kw
  4:6       ref
  7:10      data
 12:20       1:3   OP: ...
 12:17      kwargs
 23:31      1:2   OP: ::
 23:25     alg
 26:29     TPCA
 32:53      1:2   OP: ::
 32:35     data
 36:51     AbstractMatrix
214:487  block
214:315     1:2   OP: =
214:215    k
216:313    call
216:225     get_ncomps
226:236     parameters
226:236        1:3   OP: ...
226:233         1:1   OP: .
226:228        alg
229:232        quotenode
229:232         opts
237:246       1:1   OP: .
237:239      alg
240:245      quotenode
240:245       ncomps
247:251     ref
316:420     1:2   OP: =
316:324    tuple
316:316     U
317:318     Σ
319:320     V
325:418    call
325:328     tsvd
329:340     call
329:335      collect
336:338      ref
341:341     k
421:431     1:2   OP: =
421:422    P
423:429      1:6   OP: '
423:423     V
432:455     1:2   OP: =
432:439    weights
440:453    call
440:441     OP: *
442:446     data
447:453       1:6   OP: '
447:447      P
456:487   return
456:480    call
456:467     LinearDesign
468:468     P
469:475     weights,   1:38    1:2   OP: =
  1:15   call
  1:9     DoubleSDI
 10:12    alg
 16:36   block
 16:36    call
 16:24     DoubleSDI
 25:27     alg
 28:30     alg,   1:36    1:2   OP: =
  1:14   call
  1:8     SliceSDI
  9:11    alg
 15:34   block
 15:34    call
 15:22     SliceSDI
 23:25     alg
 26:28     alg,   1:1644 function
  1:355  call
  1:14    contrast_curve
 15:200   parameters
 15:18     fwhm
 19:25     kw
 19:23      sigma
 24:24      INTEGER: 5
 26:34     kw
 26:32      nbranch
 33:33      INTEGER: 1
 35:41     kw
 35:39      theta
 40:40      INTEGER: 0
 42:52     kw
 42:50      inner_rad
 51:51      INTEGER: 1
 53:98     kw
 53:60      starphot
 61:97      call
 61:85         1:1   OP: .
 61:67        Metrics
 68:84        quotenode
 68:84         estimate_starphot
 86:89       cube
 90:93       fwhm
 99:110    kw
 99:108     fc_rad_sep
109:109     INTEGER: 3
111:117    kw
111:113     snr
114:116     INTEGER: 100
118:120    kw
118:118     k
119:119     INTEGER: 2
121:131    kw
121:126     smooth
127:130     TRUE: true
132:145    kw
132:140     subsample
141:144     TRUE: true
146:154      1:3   OP: ...
146:151     kwargs
201:203   alg
204:207   cube
208:213   angles
214:216   psf
217:233     1:13  OP: ...
217:220    args
356:1630  block
356:390   macrocall
356:361    @info
362:361    NOTHING: nothing
362:390    STRING: Calculating Throughput
391:440     1:2   OP: =
391:404    reduced_empty
405:438    call
405:407     alg
408:416     parameters
408:416        1:3   OP: ...
408:413       kwargs
417:420     cube
421:428     angles
441:701     1:2   OP: =
441:454    tuple
441:447     through
448:452     meta
455:699    call
455:464     throughput
465:627     parameters
465:473      kw
465:468       fwhm
469:472       fwhm
474:492      kw
474:482       inner_rad
483:491       inner_rad
493:513      kw
493:502       fc_rad_sep
503:512       fc_rad_sep
514:524      kw
514:518       theta
519:523       theta
525:539      kw
525:531       nbranch
532:538       nbranch
540:546      kw
540:542       snr
543:545       snr
547:573      kw
547:559       reduced_empty
560:572       reduced_empty
574:582        1:3   OP: ...
574:579       kwargs
628:630     alg
631:634     cube
635:640     angles
641:643     psf
644:683       1:36  OP: ...
644:647      args
702:750     1:2   OP: =
702:714    through_mean
715:748    call
715:717     OP: |>
718:739     call
718:721      mean
722:728      through
729:734      kw
729:732       dims
733:733       INTEGER: 2
740:748     vec
751:1053   if
751:768    subsample
769:1007    block
769:1007     return
769:1000      call
769:786       subsample_contrast
787:915       parameters
787:795        kw
787:790         fwhm
791:794         fwhm
796:812        kw
796:803         starphot
804:811         starphot
813:823        kw
813:817         sigma
818:822         sigma
824:842        kw
824:832         inner_rad
833:841         inner_rad
843:853        kw
843:847         theta
848:852         theta
854:866        kw
854:859         smooth
860:865         smooth
867:869        kw
867:867         k
868:868         k
916:928       reduced_empty
929:941         1:1   OP: .
929:932        meta
933:940        quotenode
933:940         distance
942:989       through_mean
1054:1167     1:2   OP: =
1054:1067    unit_contrast
1068:1165    macrocall
1068:1070     @.
1071:1070     NOTHING: nothing
1071:1165     call
1071:1072      OP: /
1073:1083        1:1   OP: .
1073:1076       meta
1077:1082       quotenode
1077:1082        noise
1084:1165      brackets
1084:1106       call
1084:1085        OP: *
1086:1098        through_mean
1099:1106        starphot
1168:1274     1:2   OP: =
1168:1176    contrast
1177:1272      1:1   OP: .
1177:1194     calculate_contrast
1195:1271     tuple
1195:1199      sigma
1200:1212      unit_contrast
1275:1391     1:2   OP: =
1275:1285    sigma_corr
1286:1389      1:1   OP: .
1286:1302     correction_factor
1303:1388     tuple
1303:1315        1:1   OP: .
1303:1306       meta
1307:1314       quotenode
1307:1314        distance
1316:1319      fwhm
1320:1324      sigma
1392:1459     1:2   OP: =
1392:1405    contrast_corr
1406:1457      1:1   OP: .
1406:1423     calculate_contrast
1424:1456     tuple
1424:1433      sigma_corr
1434:1446      unit_contrast
1460:1630   return
1460:1623    tuple
1460:1481       1:1   OP: =
1460:1467      distance
1468:1480        1:1   OP: .
1468:1471       meta
1472:1479       quotenode
1472:1479        distance
1482:1504       1:1   OP: =
1482:1491      throughput
1492:1503      through_mean
1505:1521       1:1   OP: =
1505:1512      contrast
1513:1520      contrast
1522:1548       1:1   OP: =
1522:1534      contrast_corr
1535:1547      contrast_corr
1549:1564       1:1   OP: =
1549:1553      noise
1554:1563        1:1   OP: .
1554:1557       meta
1558:1562       quotenode
1558:1562        noise,   1:1644 function
  1:355  call
  1:14    contrast_curve
 15:200   parameters
 15:18     fwhm
 19:25     kw
 19:23      sigma
 24:24      INTEGER: 5
 26:34     kw
 26:32      nbranch
 33:33      INTEGER: 1
 35:41     kw
 35:39      theta
 40:40      INTEGER: 0
 42:52     kw
 42:50      inner_rad
 51:51      INTEGER: 1
 53:98     kw
 53:60      starphot
 61:97      call
 61:85         1:1   OP: .
 61:67        Metrics
 68:84        quotenode
 68:84         estimate_starphot
 86:89       cube
 90:93       fwhm
 99:110    kw
 99:108     fc_rad_sep
109:109     INTEGER: 3
111:117    kw
111:113     snr
114:116     INTEGER: 100
118:120    kw
118:118     k
119:119     INTEGER: 2
121:131    kw
121:126     smooth
127:130     TRUE: true
132:145    kw
132:140     subsample
141:144     TRUE: true
146:154      1:3   OP: ...
146:151     kwargs
201:203   alg
204:207   cube
208:213   angles
214:216   psf
217:233     1:13  OP: ...
217:220    args
356:1630  block
356:390   macrocall
356:361    @info
362:361    NOTHING: nothing
362:390    STRING: Calculating Throughput
391:440     1:2   OP: =
391:404    reduced_empty
405:438    call
405:407     alg
408:416     parameters
408:416        1:3   OP: ...
408:413       kwargs
417:420     cube
421:428     angles
441:701     1:2   OP: =
441:454    tuple
441:447     through
448:452     meta
455:699    call
455:464     throughput
465:627     parameters
465:473      kw
465:468       fwhm
469:472       fwhm
474:492      kw
474:482       inner_rad
483:491       inner_rad
493:513      kw
493:502       fc_rad_sep
503:512       fc_rad_sep
514:524      kw
514:518       theta
519:523       theta
525:539      kw
525:531       nbranch
532:538       nbranch
540:546      kw
540:542       snr
543:545       snr
547:573      kw
547:559       reduced_empty
560:572       reduced_empty
574:582        1:3   OP: ...
574:579       kwargs
628:630     alg
631:634     cube
635:640     angles
641:643     psf
644:683       1:36  OP: ...
644:647      args
702:750     1:2   OP: =
702:714    through_mean
715:748    call
715:717     OP: |>
718:739     call
718:721      mean
722:728      through
729:734      kw
729:732       dims
733:733       INTEGER: 2
740:748     vec
751:1053   if
751:768    subsample
769:1007    block
769:1007     return
769:1000      call
769:786       subsample_contrast
787:915       parameters
787:795        kw
787:790         fwhm
791:794         fwhm
796:812        kw
796:803         starphot
804:811         starphot
813:823        kw
813:817         sigma
818:822         sigma
824:842        kw
824:832         inner_rad
833:841         inner_rad
843:853        kw
843:847         theta
848:852         theta
854:866        kw
854:859         smooth
860:865         smooth
867:869        kw
867:867         k
868:868         k
916:928       reduced_empty
929:941         1:1   OP: .
929:932        meta
933:940        quotenode
933:940         distance
942:989       through_mean
1054:1167     1:2   OP: =
1054:1067    unit_contrast
1068:1165    macrocall
1068:1070     @.
1071:1070     NOTHING: nothing
1071:1165     call
1071:1072      OP: /
1073:1083        1:1   OP: .
1073:1076       meta
1077:1082       quotenode
1077:1082        noise
1084:1165      brackets
1084:1106       call
1084:1085        OP: *
1086:1098        through_mean
1099:1106        starphot
1168:1274     1:2   OP: =
1168:1176    contrast
1177:1272      1:1   OP: .
1177:1194     calculate_contrast
1195:1271     tuple
1195:1199      sigma
1200:1212      unit_contrast
1275:1391     1:2   OP: =
1275:1285    sigma_corr
1286:1389      1:1   OP: .
1286:1302     correction_factor
1303:1388     tuple
1303:1315        1:1   OP: .
1303:1306       meta
1307:1314       quotenode
1307:1314        distance
1316:1319      fwhm
1320:1324      sigma
1392:1459     1:2   OP: =
1392:1405    contrast_corr
1406:1457      1:1   OP: .
1406:1423     calculate_contrast
1424:1456     tuple
1424:1433      sigma_corr
1434:1446      unit_contrast
1460:1630   return
1460:1623    tuple
1460:1481       1:1   OP: =
1460:1467      distance
1468:1480        1:1   OP: .
1468:1471       meta
1472:1479       quotenode
1472:1479        distance
1482:1504       1:1   OP: =
1482:1491      throughput
1492:1503      through_mean
1505:1521       1:1   OP: =
1505:1512      contrast
1513:1520      contrast
1522:1548       1:1   OP: =
1522:1534      contrast_corr
1535:1547      contrast_corr
1549:1564       1:1   OP: =
1549:1553      noise
1554:1563        1:1   OP: .
1554:1557       meta
1558:1562       quotenode
1558:1562        noise,   1:207 function
  1:43   call
  1:17    correction_factor
 18:23    radius
 24:27    fwhm
 28:32    sigma
 44:193  block
 44:83      1:2   OP: =
 44:53     n_res_els
 54:81     call
 54:56      OP: ÷
 57:72      call
 57:58       OP: *
 59:60       INTEGER: 2
 61:63       π
 64:70       radius
 73:81      fwhm
 84:127     1:2   OP: =
 84:91     ss_corr
 92:125    call
 92:95      sqrt
 96:118     call
 96:97       OP: +
 98:99       INTEGER: 1
100:118      call
100:101       OP: /
102:103       INTEGER: 1
104:118       brackets
104:116        call
104:105         OP: -
106:115         n_res_els
116:116         INTEGER: 1
128:193   return
128:186    call
128:129     OP: *
130:178     call
130:137      quantile
138:153      call
138:142       TDist
143:151       n_res_els
154:173      call
154:156       cdf
157:164       call
157:162        Normal
165:169       sigma
179:186     ss_corr,   1:1732 function
  1:284  call
  1:18    subsample_contrast
 19:109   parameters
 19:22     fwhm
 23:30     starphot
 31:37     kw
 31:35      sigma
 36:36      INTEGER: 5
 38:48     kw
 38:46      inner_rad
 47:47      INTEGER: 1
 49:55     kw
 49:53      theta
 54:54      INTEGER: 0
 56:66     kw
 56:61      smooth
 62:65      TRUE: true
 67:69     kw
 67:67      k
 68:68      INTEGER: 2
110:120   empty_frame
121:128   distance
129:168   throughput
285:1650  block
285:317     1:2   OP: =
285:291    tuple
285:286     cy
287:289     cx
292:315    call
292:297     center
298:308     empty_frame
318:376     1:2   OP: =
318:333    radii_subsample
334:374    call
334:334     OP: :
335:349     call
335:339      first
340:347      distance
350:350     INTEGER: 1
351:373     call
351:352      OP: +
353:367      call
353:356       last
357:364       distance
368:373      INTEGER: 1
377:453     1:2   OP: =
377:394    through_subsample
395:451    call
395:429     call
395:402      Spline1D
403:410      distance
411:420      throughput
421:423      kw
421:421       k
422:422       k
430:444     radii_subsample
454:547     1:2   OP: =
454:469    noise_subsample
470:545    macrocall
470:472     @.
473:472     NOTHING: nothing
473:545     call
473:485      annulus_noise
486:499      tuple
486:496       empty_frame
500:503      fwhm
504:505      cy
506:507      cx
508:522      radii_subsample
523:527      theta
548:1051   if
548:562    smooth
563:955    block
563:639       1:2   OP: =
563:574      window_size
575:637      call
575:577       min
578:604       call
578:579        OP: -
580:603        call
580:585         length
586:600         noise_subsample
604:604        INTEGER: 2
605:624       call
605:609        round
610:612        Int
613:620        call
613:614         OP: *
615:616         INTEGER: 2
617:620         fwhm
640:689       1:3   OP: &&
640:659      call
640:645       iseven
646:656       window_size
660:686      brackets
660:675         1:3   OP: +=
660:671        window_size
672:672        INTEGER: 1
690:722       1:2   OP: =
690:695      width
696:720      call
696:698       OP: ÷
699:710       window_size
711:720       INTEGER: 2
723:778       1:2   OP: =
723:729      coeffs
730:776      call
730:732       OP: |>
733:762       call
733:745        savgol_coeffs
746:756        window_size
757:757        INTEGER: 2
763:776       Tuple
779:854       1:2   OP: =
779:792      smooth_kernel
793:852      call
793:815       curly
793:798        Kernel
799:813        tuple
799:810         call
799:799          OP: :
800:805          call
800:800           OP: -
801:805           width
806:810          width
816:841         1:3   OP: ->
816:817        w
818:838        block
818:838         call
818:820          dot
821:826          coeffs
827:834          call
827:831           Tuple
832:832           w
855:955       1:2   OP: =
855:869      noise_smoothed
870:953      call
870:872       map
873:885       smooth_kernel
886:944       call
886:891        extend
892:906        noise_subsample
907:940        call
907:938           1:1   OP: .
907:919          StaticKernels
920:937          quotenode
920:937           ExtensionReplicate
956:992    block
956:992       1:2   OP: =
956:970      noise_smoothed
971:990      noise_subsample
1052:1174     1:2   OP: =
1052:1065    unit_contrast
1066:1172    macrocall
1066:1068     @.
1069:1068     NOTHING: nothing
1069:1172     call
1069:1070      OP: /
1071:1085      noise_smoothed
1086:1172      brackets
1086:1113       call
1086:1087        OP: *
1088:1105        through_subsample
1106:1113        starphot
1175:1281     1:2   OP: =
1175:1183    contrast
1184:1279      1:1   OP: .
1184:1201     calculate_contrast
1202:1278     tuple
1202:1206      sigma
1207:1219      unit_contrast
1282:1400     1:2   OP: =
1282:1292    sigma_corr
1293:1398      1:1   OP: .
1293:1309     correction_factor
1310:1397     tuple
1310:1324      radii_subsample
1325:1328      fwhm
1329:1333      sigma
1401:1468     1:2   OP: =
1401:1414    contrast_corr
1415:1466      1:1   OP: .
1415:1432     calculate_contrast
1433:1465     tuple
1433:1442      sigma_corr
1443:1455      unit_contrast
1469:1650   return
1469:1643    tuple
1469:1492       1:1   OP: =
1469:1476      distance
1477:1491      radii_subsample
1493:1520       1:1   OP: =
1493:1502      throughput
1503:1519      through_subsample
1521:1537       1:1   OP: =
1521:1528      contrast
1529:1536      contrast
1538:1564       1:1   OP: =
1538:1550      contrast_corr
1551:1563      contrast_corr
1565:1584       1:1   OP: =
1565:1569      noise
1570:1583      noise_smoothed,   1:58    1:2   OP: =
  1:25   call
  1:12    detectionmap
 13:16    data
 17:20    fwhm
 26:56   block
 26:56    call
 26:37     detectionmap
 38:40     snr
 41:44     data
 45:48     fwhm,   1:785 function
  1:46   call
  1:3     snr
  4:23      1:2   OP: ::
  4:7      data
  8:21     AbstractMatrix
 24:31    position
 32:35    fwhm
 47:771  block
 47:66      1:2   OP: =
 47:51     tuple
 47:47      x
 48:49      y
 52:64     position
 67:92      1:2   OP: =
 67:73     tuple
 67:68      cy
 69:71      cx
 74:90     call
 74:79      center
 80:83      data
 93:139     1:2   OP: =
 93:103    separation
104:137    call
104:107     sqrt
108:130     call
108:109      OP: +
110:120      call
110:110       OP: ^
111:118       brackets
111:116        call
111:112         OP: -
113:114         x
115:116         cx
119:120       INTEGER: 2
121:130      call
121:121       OP: ^
122:129       brackets
122:127        call
122:123         OP: -
124:125         y
126:127         cy
130:130       INTEGER: 2
140:183     1:3   OP: ||
140:165    call
140:141     OP: >
142:152     separation
153:165     call
153:154      OP: +
155:163      call
155:156       OP: /
157:161       fwhm
162:163       INTEGER: 2
164:165      INTEGER: 1
166:180    return
166:173     NaN
184:201     1:2   OP: =
184:185    r
186:199    call
186:187     OP: /
188:192     fwhm
193:199     INTEGER: 2
202:249     1:2   OP: =
202:203    N
204:247    call
204:208     floor
209:211     Int
212:238     call
212:213      OP: /
214:234      call
214:215       OP: *
216:217       INTEGER: 2
218:221       π
222:232       separation
235:238      fwhm
250:267     1:2   OP: =
250:253    dθ
254:265    call
254:255     OP: /
256:259     call
256:255      OP: *
256:256      INTEGER: 2
257:259      π
260:265     N
268:315     1:2   OP: =
268:269    R
270:313    call
270:281     curly
270:278      RotMatrix
279:279      INTEGER: 2
282:284     dθ
316:331     1:2   OP: =
316:318    rx
319:329    call
319:320     OP: -
321:322     x
323:329     cx
332:348     1:2   OP: =
332:334    ry
335:346    call
335:336     OP: -
337:338     y
339:346     cy
349:379     1:2   OP: =
349:355    fluxes
356:377    call
356:362     similar
363:366     data
367:367     N
380:600   for
380:412      1:0   OP: =
380:383     idx
384:409     call
384:392      eachindex
393:398      fluxes
413:587    block
413:435       1:2   OP: =
413:417      ap_x
418:433      call
418:419       OP: +
420:422       rx
423:433       cx
436:458       1:2   OP: =
436:440      ap_y
441:456      call
441:442       OP: +
443:445       ry
446:456       cy
459:490       1:2   OP: =
459:465      tuple
459:460       rx
461:463       ry
466:488      call
466:467       OP: *
468:469       R
470:488       ref
470:471        SA
472:473        rx
474:475        ry
491:535       1:2   OP: =
491:493      ap
494:533      call
494:509       CircularAperture
510:513       ap_x
514:517       ap_y
518:518       r
536:587       1:2   OP: =
536:547      ref
536:541       fluxes
542:544       idx
548:585        1:1   OP: .
548:567       call
548:557        photometry
558:559        ap
560:563        data
568:584       quotenode
568:584        aperture_sum
601:641     1:2   OP: =
601:615    other_elements
616:639    macrocall
616:621     @view
622:621     NOTHING: nothing
622:639     ref
622:627      fluxes
628:632      call
628:628       OP: :
629:629       INTEGER: 2
630:632       END
642:696     1:2   OP: =
642:648    bkg_σ
649:694    call
649:651     std
652:665     other_elements
697:771   return
697:764    call
697:698     OP: /
699:733     brackets
699:730      call
699:700       OP: -
701:710       ref
701:706        fluxes
707:707        INTEGER: 1
711:730       call
711:714        mean
715:728        other_elements
734:764     brackets
734:761      call
734:735       OP: *
736:742       bkg_σ
743:761       call
743:746        sqrt
747:759        call
747:748         OP: +
749:750         INTEGER: 1
751:759         call
751:751          OP: /
752:752          INTEGER: 1
753:759          brackets
753:757           call
753:754            OP: -
755:756            N
757:757            INTEGER: 1,   1:88    1:2   OP: =
  1:53   call
  1:3     snr
  4:23      1:2   OP: ::
  4:7      data
  8:21     AbstractMatrix
 24:42      1:2   OP: ::
 24:26     idx
 27:40     CartesianIndex
 43:46    fwhm
 54:86   block
 54:86    call
 54:56     snr
 57:60     data
 61:74     call
 61:67      reverse
 68:72        1:1   OP: .
 68:70       idx
 71:71       quotenode
 71:71        I
 75:78     fwhm,   1:288 function
  1:55   call
  1:12    significance
 13:32      1:2   OP: ::
 13:16     data
 17:30     AbstractMatrix
 33:40    position
 41:44    fwhm
 56:275  block
 56:75      1:2   OP: =
 56:60     tuple
 56:56      x
 57:58      y
 61:73     position
 76:101     1:2   OP: =
 76:82     tuple
 76:77      cy
 78:80      cx
 83:99     call
 83:88      center
 89:92      data
102:148     1:2   OP: =
102:112    separation
113:146    call
113:116     sqrt
117:139     call
117:118      OP: +
119:129      call
119:119       OP: ^
120:127       brackets
120:125        call
120:121         OP: -
122:123         x
124:125         cx
128:129       INTEGER: 2
130:139      call
130:130       OP: ^
131:138       brackets
131:136        call
131:132         OP: -
133:134         y
135:136         cy
139:139       INTEGER: 2
149:233     1:2   OP: =
149:153    _snr
154:231    call
154:156     snr
157:160     data
161:168     position
169:172     fwhm
234:275   return
234:268    call
234:243     snr_to_sig
244:247     _snr
248:257     separation
258:261     fwhm,   1:106   1:2   OP: =
  1:62   call
  1:12    significance
 13:32      1:2   OP: ::
 13:16     data
 17:30     AbstractMatrix
 33:51      1:2   OP: ::
 33:35     idx
 36:49     CartesianIndex
 52:55    fwhm
 63:104  block
 63:104   call
 63:74     significance
 75:78     data
 79:92     call
 79:85      reverse
 86:90        1:1   OP: .
 86:88       idx
 89:89       quotenode
 89:89        I
 93:96     fwhm,   1:173 function
  1:38   call
  1:10    snr_to_sig
 11:13    snr
 14:23    separation
 24:27    fwhm
 39:160  block
 39:79      1:2   OP: =
 39:42     dof
 43:77     call
 43:44      OP: -
 45:71      call
 45:46       OP: /
 47:66       call
 47:48        OP: *
 49:50        INTEGER: 2
 51:53        π
 54:64        separation
 67:71       fwhm
 72:77      INTEGER: 2
 80:105     1:3   OP: ||
 80:87     call
 80:81      OP: >
 82:85      dof
 86:87      INTEGER: 0
 88:102    return
 88:95      NaN
106:160   return
106:153    call
106:113     quantile
114:121     call
114:119      Normal
122:148     call
122:124      cdf
125:134      call
125:129       TDist
130:132       dof
135:144      call
135:139       float
140:142       snr,   1:174 function
  1:38   call
  1:10    sig_to_snr
 11:13    sig
 14:23    separation
 24:27    fwhm
 39:160  block
 39:79      1:2   OP: =
 39:42     dof
 43:77     call
 43:44      OP: -
 45:71      call
 45:46       OP: /
 47:66       call
 47:48        OP: *
 49:50        INTEGER: 2
 51:53        π
 54:64        separation
 67:71       fwhm
 72:77      INTEGER: 2
 80:105     1:3   OP: ||
 80:87     call
 80:81      OP: >
 82:85      dof
 86:87      INTEGER: 0
 88:102    return
 88:95      NaN
106:160   return
106:153    call
106:113     quantile
114:123     call
114:118      TDist
119:121      dof
124:148     call
124:126      cdf
127:134      call
127:132       Normal
135:144      call
135:139       float
140:142       sig,   1:635 function
  1:48   call
  1:5     noise
  6:25      1:2   OP: ::
  6:9      data
 10:23     AbstractMatrix
 26:33    position
 34:37    fwhm
 49:621  block
 49:68      1:2   OP: =
 49:53     tuple
 49:49      x
 50:51      y
 54:66     position
 69:94      1:2   OP: =
 69:75     tuple
 69:70      cy
 71:73      cx
 76:92     call
 76:81      center
 82:85      data
 95:141     1:2   OP: =
 95:105    separation
106:139    call
106:109     sqrt
110:132     call
110:111      OP: +
112:122      call
112:112       OP: ^
113:120       brackets
113:118        call
113:114         OP: -
115:116         x
117:118         cx
121:122       INTEGER: 2
123:132      call
123:123       OP: ^
124:131       brackets
124:129        call
124:125         OP: -
126:127         y
128:129         cy
132:132       INTEGER: 2
142:185     1:3   OP: ||
142:167    call
142:143     OP: >
144:154     separation
155:167     call
155:156      OP: +
157:165      call
157:158       OP: /
159:163       fwhm
164:165       INTEGER: 2
166:167      INTEGER: 1
168:182    return
168:175     NaN
186:203     1:2   OP: =
186:187    r
188:201    call
188:189     OP: /
190:194     fwhm
195:201     INTEGER: 2
204:251     1:2   OP: =
204:205    N
206:249    call
206:210     floor
211:213     Int
214:240     call
214:215      OP: /
216:236      call
216:217       OP: *
218:219       INTEGER: 2
220:223       π
224:234       separation
237:240      fwhm
252:269     1:2   OP: =
252:255    dθ
256:267    call
256:257     OP: /
258:261     call
258:257      OP: *
258:258      INTEGER: 2
259:261      π
262:267     N
270:317     1:2   OP: =
270:271    R
272:315    call
272:283     curly
272:280      RotMatrix
281:281      INTEGER: 2
284:286     dθ
318:333     1:2   OP: =
318:320    rx
321:331    call
321:322     OP: -
323:324     x
325:331     cx
334:350     1:2   OP: =
334:336    ry
337:348    call
337:338     OP: -
339:340     y
341:348     cy
351:381     1:2   OP: =
351:357    fluxes
358:379    call
358:364     similar
365:368     data
369:369     N
382:602   for
382:414      1:0   OP: =
382:385     idx
386:411     call
386:394      eachindex
395:400      fluxes
415:589    block
415:437       1:2   OP: =
415:419      ap_x
420:435      call
420:421       OP: +
422:424       rx
425:435       cx
438:460       1:2   OP: =
438:442      ap_y
443:458      call
443:444       OP: +
445:447       ry
448:458       cy
461:492       1:2   OP: =
461:467      tuple
461:462       rx
463:465       ry
468:490      call
468:469       OP: *
470:471       R
472:490       ref
472:473        SA
474:475        rx
476:477        ry
493:537       1:2   OP: =
493:495      ap
496:535      call
496:511       CircularAperture
512:515       ap_x
516:519       ap_y
520:520       r
538:589       1:2   OP: =
538:549      ref
538:543       fluxes
544:546       idx
550:587        1:1   OP: .
550:569       call
550:559        photometry
560:561        ap
562:565        data
570:586       quotenode
570:586        aperture_sum
603:621   return
603:614    call
603:605     std
606:611     fluxes,   1:91    1:2   OP: =
  1:55   call
  1:5     noise
  6:25      1:2   OP: ::
  6:9      data
 10:23     AbstractMatrix
 26:44      1:2   OP: ::
 26:28     idx
 29:42     CartesianIndex
 45:48    fwhm
 56:89   block
 56:89    call
 56:60     noise
 61:64     data
 65:78     call
 65:71      reverse
 72:76        1:1   OP: .
 72:74       idx
 75:75       quotenode
 75:75        I
 79:82     fwhm,   1:332 function
  1:135  call
  1:14    stim_threshold
 15:21    stimmap
 22:30    residuals
 31:36    angles
136:318  block
136:243     1:2   OP: =
136:141    d_opp
142:241    call
142:153       1:1   OP: .
142:148      Metrics
149:152      quotenode
149:152       stim
154:159     parameters
154:159      kw
154:157       dims
158:158       INTEGER: 1
160:189     call
160:167      derotate
168:176      residuals
177:183      call
177:177       OP: -
178:183       angles
244:278     1:2   OP: =
244:248    n_ϵ
249:276    call
249:253     count
254:269     call
254:256      OP: .>
257:264      stimmap
265:269      d_opp
279:302     1:2   OP: =
279:280    n
281:300    call
281:286     length
287:293     stimmap
303:318   return
303:311    call
303:304     OP: /
305:309     n_ϵ
310:311     n,   1:176 function
  1:68   call
  1:14    stim_threshold
 15:23    residuals
 24:29    angles
 69:162  block
 69:118     1:2   OP: =
 69:70     d
 71:116    call
 71:74      stim
 75:80      parameters
 75:80       kw
 75:78        dims
 79:79        INTEGER: 1
 81:109     call
 81:88       derotate
 89:97       residuals
 98:103      angles
119:162   return
119:155    call
119:132     stim_threshold
133:133     d
134:142     residuals
143:148     angles,   1:214 function
  1:21   call
  1:4     stim
  5:8     parameters
  5:8      dims
  9:14    cube
 22:201  block
 22:52      1:2   OP: =
 22:24     μ
 25:50     call
 25:28      mean
 29:32      cube
 33:41      kw
 33:36       dims
 37:40       dims
 53:91      1:2   OP: =
 53:55     σ
 56:89     call
 56:58      std
 59:62      cube
 63:71      kw
 63:66       dims
 67:70       dims
 72:78      kw
 72:75       mean
 76:77       μ
 92:108     1:2   OP: =
 92:93     d
 94:106    call
 94:97      zero
 98:99      μ
109:134     1:2   OP: =
109:113    mask
114:132    macrocall
114:116     @.
117:116     NOTHING: nothing
117:132     call
117:117      OP: !
118:132      call
118:123       iszero
124:125       σ
135:171   macrocall
135:137    @.
138:137    NOTHING: nothing
138:171      1:2   OP: =
138:145     ref
138:138      d
139:142      mask
146:169     call
146:147      OP: /
148:156      ref
148:149       μ
150:153       mask
157:169      ref
157:158       σ
159:162       mask
172:201   return
172:194    call
172:179     dropdims
180:180     d
181:189     kw
181:184      dims
185:188      dims,   1:261 function
  1:22   call
  1:11    test_method
 12:15    func
 23:247  block
 23:50      1:2   OP: =
 23:28     frame
 29:48     call
 29:33      zeros
 34:36      INTEGER: 101
 37:39      INTEGER: 101
 51:104     1:2   OP: =
 51:64     ref
 51:55      frame
 56:57      INTEGER: 77
 58:59      INTEGER: 77
 65:102    FLOAT: 1.0
105:208   macrocall
105:110    @test
111:110    NOTHING: nothing
111:208    call
111:114     OP: ===
115:139     call
115:118      func
119:123      frame
124:131      tuple
124:125       INTEGER: 51
126:127       INTEGER: 51
132:132      INTEGER: 3
140:208     NaN
209:247   macrocall
209:214    @test
215:214    NOTHING: nothing
215:247    call
215:218     OP: ≈
219:243     call
219:222      func
223:227      frame
228:235      tuple
228:229       INTEGER: 77
230:231       INTEGER: 77
236:236      INTEGER: 3
244:247     Inf],
  num_call : Code_block → value = Any[#undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef],
  modname : Module → value = Any["ADI", "Documenter", "HCIToolbox", "FillArrays", "Setfield", "Metrics", "CoordinateTransformations", "Dierckx", "Photometry", "ProgressLogging", "StaticKernels", "Distributions", "Rotations", "StaticArrays"],
  filepath : File → value = Any["ADI\\JuliaHCI-ADI.jl-f9d5a3f\\docs\\make.jl", "ADI\\JuliaHCI-ADI.jl-f9d5a3f\\src\\ADI.jl", "ADI\\JuliaHCI-ADI.jl-f9d5a3f\\src\\classic.jl", "ADI\\JuliaHCI-ADI.jl-f9d5a3f\\src\\common.jl", "ADI\\JuliaHCI-ADI.jl-f9d5a3f\\src\\design.jl", "ADI\\JuliaHCI-ADI.jl-f9d5a3f\\src\\framewise.jl", "ADI\\JuliaHCI-ADI.jl-f9d5a3f\\src\\greeds.jl", "ADI\\JuliaHCI-ADI.jl-f9d5a3f\\src\\nmf.jl", "ADI\\JuliaHCI-ADI.jl-f9d5a3f\\src\\pca.jl", "ADI\\JuliaHCI-ADI.jl-f9d5a3f\\src\\sdi.jl", "ADI\\JuliaHCI-ADI.jl-f9d5a3f\\src\\metrics\\Metrics.jl", "ADI\\JuliaHCI-ADI.jl-f9d5a3f\\src\\metrics\\contrast.jl", "ADI\\JuliaHCI-ADI.jl-f9d5a3f\\src\\metrics\\snr.jl", "ADI\\JuliaHCI-ADI.jl-f9d5a3f\\src\\metrics\\stim.jl", "ADI\\JuliaHCI-ADI.jl-f9d5a3f\\src\\metrics\\ensemble.jl", "ADI\\JuliaHCI-ADI.jl-f9d5a3f\\test\\metrics.jl"],
  block_ids : XCalledByY → value = Any[#undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef],
  scope : Module → value = Any[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 53, Colon(), 6), 0x000000000000761d)